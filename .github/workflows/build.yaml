name: Build OpenWrt Packages

on:
  push:
    branches: [ main, master ]
    paths:
      - 'packages/**'
  pull_request:
    branches: [ main, master ]
    paths:
      - 'packages/**'
  workflow_dispatch:

env:
  FORCE_UNSAFE_CONFIGURE: 1

jobs:
  build:
    name: ${{ matrix.arch }}-${{ matrix.branch }}
    runs-on: ubuntu-latest
    continue-on-error: true
    strategy:
      fail-fast: false
      matrix:
        arch:
          - aarch64_cortex-a53
          - aarch64_cortex-a72
          - aarch64_cortex-a76
          - aarch64_generic
          - x86_64
        branch:
          - openwrt-23.05
          - openwrt-24.10
          - SNAPSHOT
        exclude:
          - arch: aarch64_cortex-a76
            branch: openwrt-23.05

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Free disk space
        run: |
          # Remove unnecessary packages and files
          sudo apt-get remove -y --purge man-db
          sudo apt-get clean
          sudo rm -rf /usr/share/dotnet /opt/ghc /usr/local/share/boost /usr/share/swift
          sudo rm -rf /var/lib/apt/lists/*
          sudo rm -rf /tmp/*
          
          # Show available space
          df -h

      - name: Prepare build environment
        run: |
          # Create necessary directories
          mkdir -p staging_dir host_dir
          
          # Ensure proper permissions for workspace
          sudo chown -R $USER:$USER ${{ github.workspace }}
          
          # Verify packages directory exists
          if [ ! -d "${{ github.workspace }}/packages" ]; then
            echo "❌ Packages directory not found at ${{ github.workspace }}/packages"
            echo "Available directories:"
            ls -la ${{ github.workspace }}/
            mkdir -p ${{ github.workspace }}/packages
            echo "Created empty packages directory"
          fi
          
          echo "✅ Packages directory found"
          echo "Contents:"
          ls -la ${{ github.workspace }}/packages/ || echo "Directory is empty"
          
          # Find and list packages to build
          if [ -d "packages" ]; then
            echo "=== Scanning for packages ==="
            PACKAGE_LIST=""
            for makefile in $(find packages/ -name 'Makefile' 2>/dev/null); do
              pkg_dir=$(dirname "$makefile")
              pkg_name=$(basename "$pkg_dir")
              echo "Found package: $pkg_name"
              PACKAGE_LIST="$PACKAGE_LIST $pkg_name"
            done
            
            if [ -n "$PACKAGE_LIST" ]; then
              echo "Packages to build:$PACKAGE_LIST"
              echo "PACKAGES_TO_BUILD=$PACKAGE_LIST" >> $GITHUB_ENV
            else
              echo "No packages found with Makefile"
              echo "PACKAGES_TO_BUILD=" >> $GITHUB_ENV
            fi
          else
            echo "PACKAGES_TO_BUILD=" >> $GITHUB_ENV
          fi

      - name: Build packages
        uses: openwrt/gh-action-sdk@main
        env:
          ARCH: ${{ matrix.arch }}-${{ matrix.branch }}
          FEEDNAME: packages_custom
          INDEX: 1
          IGNORE_ERRORS: 1
          V: s
          NO_REFRESH_CHECK: 1

      - name: Check build results
        run: |
          echo "=== Build completed for ${{ matrix.arch }}-${{ matrix.branch }} ==="
          
          # Show what we have after build
          echo "=== Workspace contents after build ==="
          find . -maxdepth 3 -type d | sort
          
          # Fix permissions after build
          sudo chown -R $USER:$USER ${{ github.workspace }} || true
          
          echo "Checking for built packages..."
          
          # Determine package extension based on branch
          if [[ "${{ matrix.branch }}" == "SNAPSHOT" ]]; then
            PKG_EXT="apk"
          else
            PKG_EXT="ipk"
          fi
          
          echo "Looking for .$PKG_EXT files..."
          
          # Look for packages in common locations
          PACKAGE_FOUND=false
          PACKAGE_COUNT=0
          
          # Standard OpenWrt SDK locations
          for search_dir in \
            "bin/packages/${{ matrix.arch }}/packages_custom" \
            "bin/packages/${{ matrix.arch }}" \
            "staging_dir/packages/${{ matrix.arch }}" \
            "openwrt/bin/packages/${{ matrix.arch }}/packages_custom" \
            "openwrt/bin/packages/${{ matrix.arch }}" \
            $(find . -path "*/bin/packages/*" -type d 2>/dev/null | head -10); do
            
            if [ -d "$search_dir" ]; then
              echo "Checking directory: $search_dir"
              ls -la "$search_dir" || true
              
              if find "$search_dir" -name "*.$PKG_EXT" 2>/dev/null | head -1 >/dev/null; then
                echo "✅ Packages found in: $search_dir"
                PACKAGES=$(find "$search_dir" -name "*.$PKG_EXT" 2>/dev/null)
                echo "$PACKAGES"
                PACKAGE_COUNT=$(echo "$PACKAGES" | wc -l)
                PACKAGE_FOUND=true
                
                # Ensure standard location exists and copy packages there
                mkdir -p "bin/packages/${{ matrix.arch }}/packages_custom"
                find "$search_dir" -name "*.$PKG_EXT" -exec cp -v {} "bin/packages/${{ matrix.arch }}/packages_custom/" \; 2>/dev/null || true
                find "$search_dir" -name "Packages*" -exec cp -v {} "bin/packages/${{ matrix.arch }}/packages_custom/" \; 2>/dev/null || true
                break
              fi
            fi
          done
          
          if [ "$PACKAGE_FOUND" = false ]; then
            echo "❌ No .$PKG_EXT packages found"
            echo "=== Searching for any package files ==="
            find . -name "*.$PKG_EXT" -type f 2>/dev/null | head -20 || echo "No package files found anywhere"
            
            echo "=== Looking for build errors ==="
            find . -name "*.log" -exec echo "=== {} ===" \; -exec tail -30 {} \; 2>/dev/null | head -100
            
            echo "=== Directory structure ==="
            find . -type d -name "*bin*" -o -name "*package*" | head -20
          else
            echo "✅ Successfully found $PACKAGE_COUNT packages"
            echo "Final package location contents:"
            ls -la "bin/packages/${{ matrix.arch }}/packages_custom/" || true
          fi

      - name: Store packages
        uses: actions/upload-artifact@v4
        with:
          name: packages-${{ matrix.branch }}-${{ matrix.arch }}
          path: |
            bin/**
            staging_dir/**
            logs/**
            .config
          if-no-files-found: warn
          retention-days: 7

  deploy:
    name: Deploy ${{ matrix.branch }} packages
    needs: build
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master')
    
    strategy:
      matrix:
        branch:
          - openwrt-23.05
          - openwrt-24.10
          - SNAPSHOT

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Download all artifacts for ${{ matrix.branch }}
        uses: actions/download-artifact@v4
        with:
          pattern: packages-${{ matrix.branch }}-*
          path: downloads/
          merge-multiple: false

      - name: Organize packages
        run: |
          mkdir -p releases/${{ matrix.branch }}
          cd downloads
          
          echo "Processing artifacts for ${{ matrix.branch }}..."
          echo "Available artifact directories:"
          ls -la
          
          # Determine package extension
          if [[ "${{ matrix.branch }}" == "SNAPSHOT" ]]; then
            PKG_EXT="apk"
          else
            PKG_EXT="ipk"
          fi
          
          for dir in packages-${{ matrix.branch }}-*/; do
            if [ -d "$dir" ]; then
              arch=$(echo "$dir" | sed 's/packages-${{ matrix.branch }}-\(.*\)\//\1/')
              echo "Processing architecture: $arch"
              
              mkdir -p "../releases/${{ matrix.branch }}/$arch"
              
              # Look for packages in artifact
              FOUND_PACKAGES=false
              
              # Check multiple possible paths within artifact
              for search_path in \
                "$dir/bin/packages/$arch/packages_custom" \
                "$dir/bin/packages/$arch" \
                "$dir/staging_dir/packages/$arch" \
                $(find "$dir" -type d -name "*packages*" 2>/dev/null); do
                
                if [ -d "$search_path" ] && find "$search_path" -name "*.$PKG_EXT" 2>/dev/null | head -1 >/dev/null; then
                  echo "Found .$PKG_EXT files in: $search_path"
                  find "$search_path" -name "*.$PKG_EXT" -exec cp {} "../releases/${{ matrix.branch }}/$arch/" \; 2>/dev/null
                  FOUND_PACKAGES=true
                fi
              done
              
              # Copy package index files
              find "$dir" -name "Packages*" -exec cp {} "../releases/${{ matrix.branch }}/$arch/" \; 2>/dev/null || true
              
              if [ "$FOUND_PACKAGES" = true ]; then
                COPIED_COUNT=$(find "../releases/${{ matrix.branch }}/$arch/" -name "*.$PKG_EXT" 2>/dev/null | wc -l)
                echo "✅ Copied $COPIED_COUNT packages for $arch"
              else
                echo "⚠️ No .$PKG_EXT packages found for $arch"
              fi
            fi
          done
          
          echo "=== Final organization results ==="
          TOTAL_PACKAGES=$(find "../releases/${{ matrix.branch }}/" -name "*.$PKG_EXT" 2>/dev/null | wc -l)
          echo "Total packages organized: $TOTAL_PACKAGES"

      - name: Generate package index
        run: |
          cd releases/${{ matrix.branch }}
          
          # Determine package format
          if [[ "${{ matrix.branch }}" == "SNAPSHOT" ]]; then
            PKG_EXT="apk"
          else
            PKG_EXT="ipk"
          fi
          
          for arch_dir in */; do
            if [ -d "$arch_dir" ]; then
              arch=$(basename "$arch_dir")
              echo "Processing index for $arch"
              
              cd "$arch_dir"
              
              # Check if we have packages
              if ls *.$PKG_EXT 1> /dev/null 2>&1; then
                echo "Generating package index for $arch"
                
                # Remove existing index
                rm -f Packages Packages.gz Packages.sig
                
                # Generate new index for IPK format
                if [ "$PKG_EXT" = "ipk" ]; then
                  # Use opkg-utils if available, otherwise create basic index
                  {
                    for pkg in *.$PKG_EXT; do
                      if [ -f "$pkg" ]; then
                        pkg_name=$(basename "$pkg" .$PKG_EXT | sed 's/_[^_]*$//')
                        version=$(basename "$pkg" .$PKG_EXT | sed 's/.*_\([^_]*\)_[^_]*$/\1/')
                        
                        echo "Package: $pkg_name"
                        echo "Version: ${version:-1.0.0}"
                        echo "Architecture: $arch"
                        echo "Filename: $pkg"
                        echo "Size: $(stat -c%s "$pkg")"
                        echo "SHA256sum: $(sha256sum "$pkg" | cut -d' ' -f1)"
                        echo "Description: Custom OpenWrt package"
                        echo "Maintainer: GitHub Actions"
                        echo ""
                      fi
                    done
                  } > Packages
                  
                  # Create compressed version
                  gzip -k Packages
                  
                  echo "✅ Generated IPK index for $arch ($(ls *.$PKG_EXT | wc -l) packages)"
                else
                  # APK format - create APKINDEX
                  {
                    for pkg in *.$PKG_EXT; do
                      if [ -f "$pkg" ]; then
                        pkg_name=$(basename "$pkg" .apk | sed 's/-[0-9].*$//')
                        
                        echo "P:$pkg_name"
                        echo "V:1.0.0-r1"
                        echo "A:$arch"
                        echo "S:$(stat -c%s "$pkg")"
                        echo "T:Custom OpenWrt package"
                        echo "U:https://github.com/${{ github.repository }}"
                        echo "L:GPL"
                        echo "o:$pkg_name"
                        echo "m:GitHub Actions"
                        echo "t:$(date +%s)"
                        echo "c:$(sha1sum "$pkg" | cut -d' ' -f1)"
                        echo ""
                      fi
                    done
                  } > APKINDEX
                  
                  echo "✅ Generated APK index for $arch ($(ls *.$PKG_EXT | wc -l) packages)"
                fi
              else
                echo "⚠️ No packages found for $arch"
              fi
              
              cd ..
            fi
          done

      - name: Create release info
        run: |
          cd releases/${{ matrix.branch }}
          
          # Determine format info
          if [[ "${{ matrix.branch }}" == "SNAPSHOT" ]]; then
            FORMAT="APK (Alpine Package Keeper)"
            REPO_FILE="/etc/apk/repositories"
            UPDATE_CMD="apk update"
            INSTALL_SYNTAX="apk add"
          else
            FORMAT="IPK (Itsy Package)"
            REPO_FILE="/etc/opkg/customfeeds.conf"
            UPDATE_CMD="opkg update"
            INSTALL_SYNTAX="opkg install"
          fi
          
          cat > README.md << EOF
          # OpenWrt Packages - ${{ matrix.branch }}

          Built: $(date -u '+%Y-%m-%d %H:%M:%S UTC')  
          Commit: [\`${GITHUB_SHA:0:7}\`](https://github.com/${{ github.repository }}/commit/${{ github.sha }})  
          Branch: ${{ github.ref_name }}  

          ## Package Format
          **Format**: $FORMAT

          ## Installation

          ### Method 1: Add Repository
          \`\`\`bash
          # Add custom feed
          echo "src/gz packages_custom https://${{ github.repository_owner }}.github.io/${{ github.event.repository.name }}/${{ matrix.branch }}/[ARCH]" >> $REPO_FILE

          # Update package lists
          $UPDATE_CMD

          # Install package
          $INSTALL_SYNTAX [PACKAGE_NAME]
          \`\`\`

          ### Method 2: Direct Download
          \`\`\`bash
          # Download package directly
          wget "https://${{ github.repository_owner }}.github.io/${{ github.event.repository.name }}/${{ matrix.branch }}/[ARCH]/[PACKAGE_FILE]"

          # Install downloaded package
          $INSTALL_SYNTAX ./[PACKAGE_FILE]
          \`\`\`

          Replace:
          - \`[ARCH]\` with your device architecture  
          - \`[PACKAGE_NAME]\` with the desired package name
          - \`[PACKAGE_FILE]\` with the actual package filename

          ## Available Architectures

          EOF
          
          total_packages=0
          for arch_dir in */; do
            if [ -d "$arch_dir" ]; then
              arch=$(basename "$arch_dir")
              
              if [[ "${{ matrix.branch }}" == "SNAPSHOT" ]]; then
                count=$(find "$arch_dir" -name "*.apk" 2>/dev/null | wc -l)
              else
                count=$(find "$arch_dir" -name "*.ipk" 2>/dev/null | wc -l)
              fi
              
              if [ "$count" -gt 0 ]; then
                echo "- **$arch** ($count packages)" >> README.md
                total_packages=$((total_packages + count))
                
                # List available packages
                echo "  - Packages: \`$(find "$arch_dir" -name "*.*pk" -exec basename {} \; | sort | tr '\n' ' ')\`" >> README.md
              fi
            fi
          done
          
          echo "" >> README.md
          echo "**Total: $total_packages packages across all architectures**" >> README.md

      - name: Deploy to GitHub Pages
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./releases
          destination_dir: .
          keep_files: true
          commit_message: "Update ${{ matrix.branch }} packages - $(date '+%Y-%m-%d %H:%M:%S')"