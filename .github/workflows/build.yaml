name: Build and Release OpenWRT Packages

on:
  workflow_dispatch:

jobs:
  build:
    name: Build ${{ matrix.arch }} (${{ matrix.branch }})
    runs-on: ubuntu-latest
    continue-on-error: true
    strategy:
      fail-fast: false
      matrix:
        arch:
          - arm_cortex-a5_vfpv4
          - arm_cortex-a7_neon-vfpv4
          - arm_cortex-a8_vfpv3
          - arm_cortex-a9
          - arm_cortex-a9_vfpv3-d16
          - arm_cortex-a9_neon
          - arm_cortex-a15_neon-vfpv4
          - aarch64_cortex-a53
          - aarch64_cortex-a72
          - aarch64_cortex-a76
          - aarch64_generic
          - mips_24kc
          - mips_4kec
          - mips_mips32
          - mipsel_24kc
          - mipsel_24kc_24kf
          - mipsel_74kc
          - mipsel_mips32
          - mips64_octeonplus
          - i386_pentium4
          - x86_64
        branch:
          - openwrt-23.05
          - openwrt-24.10
          - SNAPSHOT
        exclude:
          - arch: aarch64_cortex-a76
            branch: openwrt-23.05

    steps:
      - name: Checkout source code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup build environment
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential libncurses5-dev zlib1g-dev gawk git gettext libssl-dev xsltproc wget unzip python3

      - name: Build packages with OpenWRT SDK
        uses: openwrt/gh-action-sdk@main
        env:
          ARCH: ${{ matrix.arch }}
          BRANCH: ${{ matrix.branch }}
          FEEDNAME: custom_packages
          FEED_DIR: ./packages/
          INDEX: 1
          NO_REFRESH_CHECK: true
          IGNORE_ERRORS: true

      - name: Verify build artifacts
        run: |
          if [ ! -d "bin/packages/${{ matrix.arch }}/custom_packages" ]; then
            echo "::warning::No packages were built for ${{ matrix.arch }} (${{ matrix.branch }})"
            exit 0
          fi

      - name: Organize packages
        run: |
          # Create structured output directory
          OUTPUT_DIR="releases/${{ matrix.branch }}/${{ matrix.arch }}"
          mkdir -p "$OUTPUT_DIR"
          
          # Copy packages with verification
          if [ -d "bin/packages/${{ matrix.arch }}/custom_packages" ]; then
            rsync -av --ignore-missing-args \
              "bin/packages/${{ matrix.arch }}/custom_packages/" \
              "$OUTPUT_DIR/"
          fi
          
          # Generate simple manifest
          {
            echo "# Package Manifest"
            echo "Architecture: ${{ matrix.arch }}"
            echo "OpenWRT Version: ${{ matrix.branch }}"
            echo "Build Date: $(date -u '+%Y-%m-%d %H:%M:%S UTC')"
            echo ""
            echo "## Packages"
            find "$OUTPUT_DIR" -type f -name '*.ipk' -o -name '*.apk' | sort | sed 's|.*/||'
          } > "$OUTPUT_DIR/MANIFEST.md"

      - name: Create compressed archive
        run: |
          tar -czf "packages_${{ matrix.arch }}-${{ matrix.branch }}.tar.gz" \
            -C "releases/${{ matrix.branch }}/${{ matrix.arch }}" .

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: packages_${{ matrix.arch }}-${{ matrix.branch }}
          path: |
            releases/${{ matrix.branch }}/${{ matrix.arch }}/*
            packages_${{ matrix.arch }}-${{ matrix.branch }}.tar.gz

  release:
    name: Publish Packages
    needs: build
    runs-on: ubuntu-latest
    if: always() && (needs.build.result == 'success' || needs.build.result == 'failure')
    
    steps:
      - name: Checkout releases branch
        uses: actions/checkout@v4
        with:
          ref: releases
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Configure Git
        run: |
          git config --global user.email "actions@github.com"
          git config --global user.name "OpenWRT Package Builder"
          git config --global pull.rebase true

      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Process artifacts
        run: |
          # Create base directory
          mkdir -p packages
          
          # Process each artifact
          for artifact in artifacts/packages_*; do
            if [ -d "$artifact" ]; then
              # Extract arch and branch from artifact name
              name=$(basename "$artifact")
              arch_branch=${name#packages_}
              arch=${arch_branch%-*}
              branch=${arch_branch##*-}
              
              echo "Processing: $name (arch: $arch, branch: $branch)"
              
              # Create target directory
              target_dir="packages/$branch/$arch"
              mkdir -p "$target_dir"
              
              # Copy packages
              if [ -d "$artifact/releases/$branch/$arch" ]; then
                rsync -av --ignore-missing-args \
                  "$artifact/releases/$branch/$arch/" \
                  "$target_dir/"
              fi
              
              # Verify we got packages
              if [ -z "$(find "$target_dir" -name '*.ipk' -o -name '*.apk')" ]; then
                echo "::warning::No packages found in $target_dir"
              fi
            fi
          done



      - name: Update repository metadata
        run: |
          # Count packages and create metadata
          total_packages=$(find packages -name '*.ipk' -o -name '*.apk' | wc -l)
          total_branches=$(find packages -mindepth 1 -maxdepth 1 -type d | wc -l)
          total_archs=$(find packages -mindepth 2 -maxdepth 2 -type d | wc -l)
          
          # Create repository metadata
          cat > packages/repository.json <<EOF
          {
            "repository": {
              "version": "1.0",
              "date": "$(date -u '+%Y-%m-%dT%H:%M:%SZ')",
              "packages": $total_packages,
              "branches": $total_branches,
              "architectures": $total_archs
            }
          }
          EOF
          
          # Generate README
          {
            echo "# OpenWRT Custom Packages Repository"
            echo ""
            echo "This repository contains pre-built packages for various OpenWRT versions and architectures."
            echo ""
            echo "## Repository Stats"
            echo "- Last updated: $(date -u '+%Y-%m-%d %H:%M:%S UTC')"
            echo "- Total packages: $total_packages"
            echo "- Supported OpenWRT versions:"
            
            for branch in packages/*; do
              if [ -d "$branch" ]; then
                branch_name=$(basename "$branch")
                branch_packages=$(find "$branch" -name '*.ipk' -o -name '*.apk' | wc -l)
                echo "  - $branch_name ($branch_packages packages)"
              fi
            done
            
            echo ""
            echo "## Usage"
            echo ""
            echo "## Available Packages by Architecture"
            echo ""
            
            for branch in packages/*; do
              if [ -d "$branch" ]; then
                branch_name=$(basename "$branch")
                echo "### $branch_name"
                echo ""
                for arch in "$branch"/*; do
                  if [ -d "$arch" ]; then
                    arch_name=$(basename "$arch")
                    arch_packages=$(find "$arch" -name '*.ipk' -o -name '*.apk' | wc -l)
                    if [ $arch_packages -gt 0 ]; then
                      echo "- **$arch_name**: $arch_packages packages"
                    fi
                  fi
                done
                echo ""
              fi
            done
            
            echo "## Download"
            echo ""
            echo "Browse and download packages directly from the [releases branch](https://github.com/${{ github.repository }}/tree/releases/packages)."
          } > README.md

      - name: Commit and push changes
        run: |
          git add .
          if ! git diff --cached --quiet; then
            git commit -m "ðŸ“¦ Package update $(date -u '+%Y-%m-%d')" \
                      -m "Updated packages for all architectures" \
                      -m "Total packages: $(find packages -name '*.ipk' -o -name '*.apk' | wc -l)" \
                      -m "Automated build from GitHub Actions"
            git push origin releases
          else
            echo "No changes to commit"
          fi