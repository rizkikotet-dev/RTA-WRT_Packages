name: Build OpenWrt Packages

on:
  push:
    branches: [ main, master ]
    paths:
      - 'packages/**'
  pull_request:
    branches: [ main, master ]
    paths:
      - 'packages/**'
  workflow_dispatch:

jobs:
  build:
    name: Build ${{ matrix.release }}-${{ matrix.arch }}
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        release:
          - "23.05.5"
          - "24.10.1"
          - "snapshot"
        arch:
          - "aarch64_cortex-a53"
          - "aarch64_cortex-a72"
          - "aarch64_generic"
          - "mips_24kc"
          - "mips_4kec"
          - "mips_mips32"
          - "mipsel_24kc"
          - "mipsel_74kc"
          - "mipsel_mips32"
          - "x86_64"

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Determine architecture for release
        id: arch_setup
        run: |
          if [ "${{ matrix.release }}" = "snapshot" ]; then
            echo "arch=${{ matrix.arch }}" >> $GITHUB_OUTPUT
          else
            echo "arch=${{ matrix.arch }}-${{ matrix.release }}" >> $GITHUB_OUTPUT
          fi

      - name: Build packages
        uses: openwrt/gh-action-sdk@main
        env:
          ARCH: ${{ steps.arch_setup.outputs.arch }}
          FEEDNAME: packages_custom
          FEED_DIR: ${{ github.workspace }}/packages
          BUILD_LOG: 1
          INDEX: 1
          IGNORE_ERRORS: 0

      - name: Check build results
        run: |
          echo "=== Build completed for ${{ matrix.release }}-${{ matrix.arch }} ==="
          echo "Checking for built packages..."
          
          # Check for both ipk and apk files
          if find bin/packages/${{ steps.arch_setup.outputs.arch }}/packages_custom/ -name "*.ipk" -o -name "*.apk" 2>/dev/null | head -1; then
            echo "✅ Packages found:"
            find bin/packages/${{ steps.arch_setup.outputs.arch }}/packages_custom/ -name "*.ipk" -o -name "*.apk" 2>/dev/null || true
          else
            echo "❌ No packages found"
            echo "Directory contents:"
            ls -la bin/packages/${{ steps.arch_setup.outputs.arch }}/ 2>/dev/null || echo "Directory not found"
          fi

      - name: Store packages
        uses: actions/upload-artifact@v4
        with:
          name: packages-${{ matrix.release }}-${{ matrix.arch }}
          path: |
            bin/packages/${{ steps.arch_setup.outputs.arch }}/packages_custom/*.ipk
            bin/packages/${{ steps.arch_setup.outputs.arch }}/packages_custom/*.apk
            bin/packages/${{ steps.arch_setup.outputs.arch }}/packages_custom/Packages*
          if-no-files-found: warn

      - name: Store build logs
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: logs-${{ matrix.release }}-${{ matrix.arch }}
          path: logs/
          if-no-files-found: ignore

  deploy:
    name: Deploy ${{ matrix.release }} packages
    needs: build
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
    
    strategy:
      matrix:
        release:
          - "23.05.5"
          - "24.10.1"
          - "snapshot"

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Download all artifacts for release
        uses: actions/download-artifact@v4
        with:
          pattern: packages-${{ matrix.release }}-*
          path: downloads/

      - name: Organize packages
        run: |
          mkdir -p releases/${{ matrix.release }}
          cd downloads
          
          echo "Processing artifacts for ${{ matrix.release }}..."
          for dir in packages-${{ matrix.release }}-*/; do
            if [ -d "$dir" ]; then
              arch=$(echo "$dir" | sed 's/packages-${{ matrix.release }}-\(.*\)\//\1/')
              echo "Processing architecture: $arch"
              
              mkdir -p "../releases/${{ matrix.release }}/$arch"
              
              # Copy package files (both ipk and apk)
              find "$dir" -name "*.ipk" -exec cp {} "../releases/${{ matrix.release }}/$arch/" \; 2>/dev/null || true
              find "$dir" -name "*.apk" -exec cp {} "../releases/${{ matrix.release }}/$arch/" \; 2>/dev/null || true
              
              # Copy package index files if they exist
              find "$dir" -name "Packages*" -exec cp {} "../releases/${{ matrix.release }}/$arch/" \; 2>/dev/null || true
            fi
          done

      - name: Generate package index (if not exists)
        run: |
          cd releases/${{ matrix.release }}
          for arch_dir in */; do
            if [ -d "$arch_dir" ] && [ -n "$(find "$arch_dir" -name "*.ipk" -o -name "*.apk" 2>/dev/null)" ]; then
              arch=$(basename "$arch_dir")
              echo "Checking index for $arch"
              
              cd "$arch_dir"
              
              # Generate index only if Packages file doesn't exist
              if [ ! -f "Packages" ]; then
                echo "Generating package index for $arch"
                
                # Create Packages file for both ipk and apk
                for pkg in *.ipk *.apk; do
                  if [ -f "$pkg" ]; then
                    # Get package extension
                    ext="${pkg##*.}"
                    # Get package name without extension
                    pkg_name=$(basename "$pkg" .$ext)
                    
                    echo "Package: $pkg_name"
                    echo "Version: $(date +%Y%m%d)"
                    echo "Architecture: $arch"
                    echo "Filename: $pkg"
                    echo "Size: $(stat -c%s "$pkg")"
                    echo "SHA256sum: $(sha256sum "$pkg" | cut -d' ' -f1)"
                    if [ "$ext" = "apk" ]; then
                      echo "Format: apk"
                    else
                      echo "Format: ipk"
                    fi
                    echo ""
                  fi
                done > Packages
                
                # Compress Packages file
                gzip -k Packages
              else
                echo "Index already exists for $arch"
              fi
              
              cd ..
            fi
          done

      - name: Create release info
        run: |
          cd releases/${{ matrix.release }}
          cat > README.md << EOF
          # OpenWrt Packages - ${{ matrix.release }}
          
          Built on: $(date)
          Commit: ${{ github.sha }}
          Branch: ${{ github.ref_name }}
          
          ## Package Format
          $(if [ "${{ matrix.release }}" = "snapshot" ]; then echo "- Format: APK (Alpine Package Keeper)"; else echo "- Format: IPK (Itsy Package)"; fi)
          
          ## Installation
          
          ### For IPK packages (23.05.5, 24.10.1):
          \`\`\`bash
          # Add custom feed
          echo "src/gz packages_custom https://raw.githubusercontent.com/${{ github.repository }}/releases/${{ matrix.release }}/[ARCH]" >> /etc/opkg/customfeeds.conf
          
          # Update package lists
          opkg update
          
          # Install package
          opkg install [PACKAGE_NAME]
          \`\`\`
          
          ### For APK packages (snapshot):
          \`\`\`bash
          # Add custom repository
          echo "https://raw.githubusercontent.com/${{ github.repository }}/releases/${{ matrix.release }}/[ARCH]" >> /etc/apk/repositories
          
          # Update package lists
          apk update
          
          # Install package
          apk add [PACKAGE_NAME]
          \`\`\`
          
          ## Available Architectures
          
          EOF
          
          total_packages=0
          for arch_dir in */; do
            if [ -d "$arch_dir" ]; then
              arch=$(basename "$arch_dir")
              count=$(find "$arch_dir" -name "*.ipk" -o -name "*.apk" 2>/dev/null | wc -l)
              if [ "$count" -gt 0 ]; then
                echo "- **$arch** ($count packages)" >> README.md
                total_packages=$((total_packages + count))
              fi
            fi
          done
          
          echo "" >> README.md
          echo "**Total: $total_packages packages**" >> README.md

      - name: Setup Git for releases branch
        run: |
          git config --global user.email "action@github.com"
          git config --global user.name "GitHub Action"

      - name: Deploy to releases branch
        run: |
          # Try to fetch releases branch
          git fetch origin releases:releases 2>/dev/null || true
          
          if git show-ref --verify --quiet refs/heads/releases; then
            echo "✅ Switching to existing releases branch"
            git checkout releases
          else
            echo "🆕 Creating new releases branch"
            git checkout --orphan releases
            git rm -rf . 2>/dev/null || true
            echo "# OpenWrt Packages Repository" > README.md
            echo "" >> README.md
            echo "This branch contains built OpenWrt packages organized by release version." >> README.md
            echo "" >> README.md
            echo "## Available Releases" >> README.md
            echo "- 23.05.5 (IPK format)" >> README.md
            echo "- 24.10.1 (IPK format)" >> README.md
            echo "- snapshot (APK format)" >> README.md
            git add README.md
            git commit -m "Initial commit for releases branch"
            git push origin releases
          fi
          
          # Create directory structure for this release
          mkdir -p ${{ matrix.release }}
          
          # Copy release files to the specific release directory
          if [ -d "releases/${{ matrix.release }}" ]; then
            cp -r releases/${{ matrix.release }}/* ${{ matrix.release }}/ 2>/dev/null || true
          fi
          
          # Add and commit changes
          git add ${{ matrix.release }}/
          if git diff --staged --quiet; then
            echo "ℹ️  No changes to commit for ${{ matrix.release }}"
          else
            echo "✅ Committing changes for ${{ matrix.release }}"
            git commit -m "Update packages for ${{ matrix.release }} - $(date '+%Y-%m-%d %H:%M:%S')"
            git push origin releases
            echo "🚀 Successfully deployed ${{ matrix.release }} packages to releases branch"
          fi