name: 🚀 Build OpenWrt Packages

on:
  push:
    branches: [main, master]
    paths:
      - 'packages/**'
  pull_request:
    branches: [main, master]
    paths:
      - 'packages/**'
  workflow_dispatch:
    inputs:
      target_arch:
        description: '🎯 Target Architecture (leave empty for all)'
        required: false
        type: choice
        options:
          - ''
          - 'aarch64_cortex-a53'
          - 'aarch64_cortex-a72'
          - 'aarch64_cortex-a76'
          - 'aarch64_generic'
          - 'x86_64'
      target_branch:
        description: '🌿 Target Branch (leave empty for all)'
        required: false
        type: choice
        options:
          - ''
          - 'openwrt-23.05'
          - 'openwrt-24.10'
          - 'SNAPSHOT'
      force_rebuild:
        description: '🔧 Force rebuild all packages'
        required: false
        default: false
        type: boolean

env:
  FORCE_UNSAFE_CONFIGURE: 1
  BUILD_DATE: ${{ github.event.head_commit.timestamp || github.run_id }}

jobs:
  prepare:
    name: 🔍 Prepare Build Matrix
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
      packages-found: ${{ steps.scan-packages.outputs.packages-found }}
      total-packages: ${{ steps.scan-packages.outputs.total-packages }}
    
    steps:
      - name: 📂 Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 📦 Scan Available Packages
        id: scan-packages
        run: |
          echo "🔍 Scanning for packages to build..."
          
          if [[ ! -d "packages" ]]; then
            echo "❌ Packages directory not found"
            echo "packages-found=false" >> $GITHUB_OUTPUT
            echo "total-packages=0" >> $GITHUB_OUTPUT
            exit 1
          fi
          
          mapfile -t package_makefiles < <(find packages/ -type f -name 'Makefile' 2>/dev/null)
          if [[ ${#package_makefiles[@]} -eq 0 ]]; then
            echo "❌ No packages with Makefile found"
            echo "packages-found=false" >> $GITHUB_OUTPUT
            echo "total-packages=0" >> $GITHUB_OUTPUT
            exit 1
          fi
          
          package_list=""
          for makefile in "${package_makefiles[@]}"; do
            pkg_name=$(basename "$(dirname "$makefile")")
            echo "  📦 $pkg_name"
            package_list="$package_list $pkg_name"
          done
          
          echo "✅ Found ${#package_makefiles[@]} packages to build"
          echo "packages-found=true" >> $GITHUB_OUTPUT
          echo "total-packages=${#package_makefiles[@]}" >> $GITHUB_OUTPUT
          echo "PACKAGES_TO_BUILD=$package_list" >> $GITHUB_ENV

      - name: 🎯 Generate Build Matrix
        id: set-matrix
        run: |
          echo "🔍 Generating build matrix..."
          
          # Define base matrix
          ARCHS='["aarch64_cortex-a53", "aarch64_cortex-a72", "aarch64_cortex-a76", "aarch64_generic", "x86_64"]'
          BRANCHES='["openwrt-23.05", "openwrt-24.10", "SNAPSHOT"]'
          
          # Apply manual selections if provided
          if [[ -n "${{ github.event.inputs.target_arch }}" ]]; then
            ARCHS='["${{ github.event.inputs.target_arch }}"]'
          fi
          
          if [[ -n "${{ github.event.inputs.target_branch }}" ]]; then
            BRANCHES='["${{ github.event.inputs.target_branch }}"]'
          fi
          
          # Define exclusions
          EXCLUDE='[{"arch": "aarch64_cortex-a76", "branch": "openwrt-23.05"}]'
          
          # Generate compact JSON matrix
          MATRIX=$(jq -n -c \
            --argjson archs "$ARCHS" \
            --argjson branches "$BRANCHES" \
            --argjson exclude "$EXCLUDE" \
            '{arch: $archs, branch: $branches, exclude: $exclude}')
          
          echo "matrix=$MATRIX" >> $GITHUB_OUTPUT
          echo "🎯 Build matrix generated:"
          echo "$MATRIX" | jq .

  build:
    name: 🔨 Build ${{ matrix.arch }}-${{ matrix.branch }}
    runs-on: ubuntu-latest
    needs: prepare
    if: needs.prepare.outputs.packages-found == 'true'
    continue-on-error: true
    
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.prepare.outputs.matrix) }}

    steps:
      - name: 📂 Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 🧹 Free Disk Space
        run: |
          echo "🧹 Cleaning up disk space..."
          df -h
          
          sudo apt-get remove -y --purge \
            man-db \
            apache2* \
            mysql* \
            postgresql* \
            mono-* \
            firefox \
            google-chrome-stable \
            dotnet* \
            powershell \
            azure-cli \
            google-cloud-sdk
          
          sudo apt-get autoremove -y
          sudo apt-get clean
          
          sudo rm -rf \
            /usr/share/dotnet \
            /opt/ghc \
            /usr/local/share/boost \
            /usr/share/swift \
            /var/lib/apt/lists/* \
            /tmp/* \
            /opt/hostedtoolcache \
            /usr/local/lib/android \
            /usr/local/share/powershell \
            /opt/az
          
          echo "📊 Available space after cleanup:"
          df -h

      - name: 🏗️ Prepare Build Environment
        run: |
          echo "🏗️ Setting up build environment for ${{ matrix.arch }}-${{ matrix.branch }}..."
          
          mkdir -p staging_dir host_dir
          sudo chown -R "$USER:$USER" "${{ github.workspace }}"
          
          if [[ ! -d "${{ github.workspace }}/packages" ]]; then
            echo "❌ Packages directory not found!"
            exit 1
          fi
          
          echo "✅ Packages directory verified"
          echo "📦 Package contents:"
          find packages/ -type f -name 'Makefile' -exec dirname {} \; | sort
          
          echo "BUILD_ARCH=${{ matrix.arch }}" >> $GITHUB_ENV
          echo "BUILD_BRANCH=${{ matrix.branch }}" >> $GITHUB_ENV
          echo "BUILD_TIMESTAMP=$(date +%Y%m%d-%H%M%S)" >> $GITHUB_ENV
          
          if [[ "${{ matrix.branch }}" == "SNAPSHOT" ]]; then
            echo "PKG_FORMAT=apk" >> $GITHUB_ENV
            echo "PKG_EXT=apk" >> $GITHUB_ENV
          else
            echo "PKG_FORMAT=ipk" >> $GITHUB_ENV
            echo "PKG_EXT=ipk" >> $GITHUB_ENV
          fi

      - name: 🔨 Build Packages
        uses: openwrt/gh-action-sdk@v6
        env:
          ARCH: ${{ matrix.arch }}-${{ matrix.branch }}
          FEEDNAME: packages_custom
          FEED_DIR: ./packages/
          INDEX: 1
          NO_REFRESH_CHECK: true
          FORCE_REBUILD: ${{ github.event.inputs.force_rebuild }}

      - name: 🔍 Analyze Build Results
        id: analyze-build
        run: |
          echo "🔍 Analyzing build results for ${{ matrix.arch }}-${{ matrix.branch }}..."
          
          sudo chown -R "$USER:$USER" "${{ github.workspace }}" || true
          
          packages_built=0
          packages_failed=0
          build_success=false
          
          echo "🔎 Searching for .${{ env.PKG_EXT }} packages..."
          
          search_paths=(
            "bin/packages/${{ matrix.arch }}/packages_custom"
            "bin/packages/${{ matrix.arch }}"
            "staging_dir/packages/${{ matrix.arch }}"
            "openwrt/bin/packages/${{ matrix.arch }}/packages_custom"
            "openwrt/bin/packages/${{ matrix.arch }}"
          )
          
          for search_dir in "${search_paths[@]}"; do
            if [[ -d "$search_dir" ]]; then
              mapfile -t packages < <(find "$search_dir" -type f -name "*.${{ env.PKG_EXT }}" 2>/dev/null)
              if [[ ${#packages[@]} -gt 0 ]]; then
                echo "✅ Found ${#packages[@]} packages in: $search_dir"
                packages_built=${#packages[@]}
                build_success=true
                
                mkdir -p "bin/packages/${{ matrix.arch }}/packages_custom"
                find "$search_dir" -type f -name "*.${{ env.PKG_EXT }}" -exec cp -v {} "bin/packages/${{ matrix.arch }}/packages_custom/" \; 2>/dev/null || true
                find "$search_dir" -type f -name "Packages*" -exec cp -v {} "bin/packages/${{ matrix.arch }}/packages_custom/" \; 2>/dev/null || true
                
                echo "📦 Built packages:"
                find "bin/packages/${{ matrix.arch }}/packages_custom" -type f -name "*.${{ env.PKG_EXT }}" -exec basename {} \; | sort
                break
              fi
            fi
          done
          
          if [[ "$build_success" == "false" ]]; then
            echo "❌ No packages built successfully"
            mapfile -t log_files < <(find . -type f -name "*.log" 2>/dev/null | head -n 10)
            for logfile in "${log_files[@]}"; do
              echo "📄 Log: $logfile"
              echo "--- Last 20 lines ---"
              tail -n 20 "$logfile" 2>/dev/null || true
              echo "---"
            done
            packages_failed=$(find packages/ -type f -name 'Makefile' | wc -l)
          fi
          
          echo "packages-built=$packages_built" >> $GITHUB_OUTPUT
          echo "packages-failed=$packages_failed" >> $GITHUB_OUTPUT
          echo "build-success=$build_success" >> $GITHUB_OUTPUT
          
          echo "📊 Build Summary:"
          echo "  ✅ Packages built: $packages_built"
          echo "  ❌ Packages failed: $packages_failed"
          echo "  🎯 Build success: $build_success"

      - name: 📦 Package Build Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: packages-${{ matrix.branch }}-${{ matrix.arch }}
          path: |
            bin/**
            staging_dir/**
            logs/**
            .config
          if-no-files-found: warn
          retention-days: 7

      - name: 📊 Build Summary
        run: |
          {
            echo "# 🔨 Build Summary: ${{ matrix.arch }}-${{ matrix.branch }}"
            echo ""
            echo "| Metric | Value |"
            echo "|--------|-------|"
            echo "| 🎯 **Architecture** | \`${{ matrix.arch }}\` |"
            echo "| 🌿 **Branch** | \`${{ matrix.branch }}\` |"
            echo "| 📦 **Package Format** | \`${{ env.PKG_FORMAT }}\` |"
            echo "| ✅ **Packages Built** | \`${{ steps.analyze-build.outputs.packages-built }}\` |"
            echo "| ❌ **Packages Failed** | \`${{ steps.analyze-build.outputs.packages-failed }}\` |"
            echo "| 🏆 **Build Status** | $(if [[ "${{ steps.analyze-build.outputs.build-success }}" == "true" ]]; then echo "✅ **SUCCESS**"; else echo "❌ **FAILED**"; fi) |"
          } >> $GITHUB_STEP_SUMMARY

  build-summary:
    name: 📊 Overall Build Summary
    runs-on: ubuntu-latest
    needs: [prepare, build]
    if: always() && needs.prepare.outputs.packages-found == 'true'
    
    steps:
      - name: 📊 Generate Overall Summary
        run: |
          {
            echo "# 📊 OpenWrt Packages Build Summary"
            echo ""
            echo "## 🎯 Build Information"
            echo "| Item | Value |"
            echo "|------|-------|"
            echo "| 📅 **Build Date** | \`$(date -u '+%Y-%m-%d %H:%M:%S UTC')\` |"
            echo "| 🌿 **Branch** | \`${{ github.ref_name }}\` |"
            echo "| 📦 **Total Packages** | \`${{ needs.prepare.outputs.total-packages }}\` |"
            echo "| 🚀 **Trigger** | \`${{ github.event_name }}\` |"
          } >> $GITHUB_STEP_SUMMARY

  deploy:
    name: 🚀 Deploy ${{ matrix.branch }} Packages
    needs: [prepare, build]
    if: always() && needs.prepare.outputs.packages-found == 'true'
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        branch:
          - openwrt-23.05
          - openwrt-24.10
          - SNAPSHOT

    steps:
      - name: 📂 Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: ⬇️ Download Build Artifacts
        uses: actions/download-artifact@v4
        with:
          pattern: packages-${{ matrix.branch }}-*
          path: downloads/
          merge-multiple: false

      - name: 🗂️ Organize Package Repository
        id: organize
        run: |
          echo "🗂️ Organizing packages for ${{ matrix.branch }}..."
          
          mkdir -p releases/${{ matrix.branch }}
          cd downloads
          
          pkg_ext=$([[ "${{ matrix.branch }}" == "SNAPSHOT" ]] && echo "apk" || echo "ipk")
          pkg_format=$([[ "${{ matrix.branch }}" == "SNAPSHOT" ]] && echo "APK" || echo "IPK")
          
          echo "PKG_EXT=$pkg_ext" >> $GITHUB_ENV
          echo "PKG_FORMAT=$pkg_format" >> $GITHUB_ENV
          
          total_packages=0
          total_archs=0
          
          for dir in packages-${{ matrix.branch }}-*/; do
            if [[ -d "$dir" ]]; then
              arch=$(echo "$dir" | sed 's/packages-${{ matrix.branch }}-\(.*\)\//\1/')
              echo "🏗️ Processing architecture: $arch"
              
              mkdir -p "../releases/${{ matrix.branch }}/$arch"
              
              search_paths=(
                "$dir/bin/packages/$arch/packages_custom"
                "$dir/bin/packages/$arch"
                "$dir/staging_dir/packages/$arch"
              )
              
              arch_packages=0
              for search_path in "${search_paths[@]}"; do
                if [[ -d "$search_path" ]]; then
                  mapfile -t packages < <(find "$search_path" -type f -name "*.$pkg_ext" 2>/dev/null)
                  if [[ ${#packages[@]} -gt 0 ]]; then
                    echo "📦 Found ${#packages[@]} packages in: $search_path"
                    find "$search_path" -type f -name "*.$pkg_ext" -exec cp {} "../releases/${{ matrix.branch }}/$arch/" \; 2>/dev/null
                    arch_packages=$((arch_packages + ${#packages[@]}))
                  fi
                fi
              done
              
              find "$dir" -type f -name "Packages*" -exec cp {} "../releases/${{ matrix.branch }}/$arch/" \; 2>/dev/null || true
              find "$dir" -type f -name "APKINDEX*" -exec cp {} "../releases/${{ matrix.branch }}/$arch/" \; 2>/dev/null || true
              
              if [[ $arch_packages -gt 0 ]]; then
                echo "✅ Organized $arch_packages packages for $arch"
                total_packages=$((total_packages + arch_packages))
                total_archs=$((total_archs + 1))
              else
                echo "⚠️ No packages found for $arch"
                rmdir "../releases/${{ matrix.branch }}/$arch" 2>/dev/null || true
              fi
            fi
          done
          
          echo "📊 Organization complete:"
          echo "  🏗️ Architectures: $total_archs"
          echo "  📦 Total packages: $total_packages"
          
          echo "total-packages=$total_packages" >> $GITHUB_OUTPUT
          echo "total-archs=$total_archs" >> $GITHUB_OUTPUT

      - name: 📋 Generate Package Indexes
        run: |
          echo "📋 Generating package indexes for ${{ matrix.branch }}..."
          
          cd releases/${{ matrix.branch }}
          
          for arch_dir in */; do
            if [[ -d "$arch_dir" ]]; then
              arch=$(basename "$arch_dir")
              echo "📝 Creating index for $arch"
              
              cd "$arch_dir"
              
              if ls *.${{ env.PKG_EXT }} >/dev/null 2>&1; then
                if [[ "${{ env.PKG_EXT }}" == "ipk" ]]; then
                  {
                    for pkg in *.${{ env.PKG_EXT }}; do
                      if [[ -f "$pkg" ]]; then
                        pkg_base=$(basename "$pkg" .${{ env.PKG_EXT }})
                        pkg_name=$(echo "$pkg_base" | sed 's/_[^_]*_[^_]*$//')
                        pkg_version=$(echo "$pkg_base" | sed 's/.*_\([^_]*\)_[^_]*$/\1/' || echo "1.0.0")
                        pkg_arch=$(echo "$pkg_base" | sed 's/.*_[^_]*_\([^_]*\)$/\1/' || echo "$arch")
                        
                        echo "Package: $pkg_name"
                        echo "Version: $pkg_version"
                        echo "Architecture: $pkg_arch"
                        echo "Filename: $pkg"
                        echo "Size: $(stat -c%s "$pkg")"
                        echo "SHA256sum: $(sha256sum "$pkg" | cut -d' ' -f1)"
                        echo "Description: Custom OpenWrt package - $pkg_name"
                        echo "Maintainer: GitHub Actions <action@github.com>"
                        echo "Source: https://github.com/${{ github.repository }}"
                        echo ""
                      fi
                    done
                  } > Packages
                  
                  gzip -k Packages
                  echo "✅ Generated IPK index for $arch"
                else
                  {
                    for pkg in *.${{ env.PKG_EXT }}; do
                      if [[ -f "$pkg" ]]; then
                        pkg_name=$(basename "$pkg" .apk | sed 's/-[0-9].*$//')
                        
                        echo "P:$pkg_name"
                        echo "V:1.0.0-r1"
                        echo "A:$arch"
                        echo "S:$(stat -c%s "$pkg")"
                        echo "T:Custom OpenWrt package - $pkg_name"
                        echo "U:https://github.com/${{ github.repository }}"
                        echo "L:GPL-2.0"
                        echo "o:$pkg_name"
                        echo "m:GitHub Actions"
                        echo "t:$(date +%s)"
                        echo "c:$(sha256sum "$pkg" | cut -d' ' -f1)"
                        echo ""
                      fi
                    done
                  } > APKINDEX
                  
                  echo "✅ Generated APK index for $arch"
                fi
              fi
              
              cd ..
            fi
          done

      - name: 📄 Create Repository Documentation
        run: |
          echo "📄 Creating repository documentation for ${{ matrix.branch }}..."
          
          cd releases/${{ matrix.branch }}
          
          format_name=$([[ "${{ matrix.branch }}" == "SNAPSHOT" ]] && echo "APK (Alpine Package Keeper)" || echo "IPK (Itsy Package)")
          repo_file=$([[ "${{ matrix.branch }}" == "SNAPSHOT" ]] && echo "/etc/apk/repositories" || echo "/etc/opkg/customfeeds.conf")
          update_cmd=$([[ "${{ matrix.branch }}" == "SNAPSHOT" ]] && echo "apk update" || echo "opkg update")
          install_cmd=$([[ "${{ matrix.branch }}" == "SNAPSHOT" ]] && echo "apk add" || echo "opkg install")
          
          {
            echo "# 🚀 OpenWrt Custom Packages - ${{ matrix.branch }}"
            echo ""
            echo "[![Build Status](https://img.shields.io/github/actions/workflow/status/${{ github.repository }}/build.yml?branch=${{ github.ref_name }}&label=Build)](https://github.com/${{ github.repository }}/actions)"
            echo "[![Last Updated](https://img.shields.io/badge/Last%20Updated-$(date -u '+%Y-%m-%d')-blue)](https://github.com/${{ github.repository }})"
            echo "[![Total Packages](https://img.shields.io/badge/Total%20Packages-${{ steps.organize.outputs.total-packages }}-green)](https://github.com/${{ github.repository }})"
            echo ""
            echo "## 📋 Repository Information"
            echo ""
            echo "| Item | Details |"
            echo "|------|---------|"
            echo "| 🏗️ **Built** | $(date -u '+%Y-%m-%d %H:%M:%S UTC') |"
            echo "| 🌿 **Branch** | \`${{ github.ref_name }}\` |"
            echo "| 📦 **Format** | $format_name |"
            echo "| 🏗️ **Architectures** | ${{ steps.organize.outputs.total-archs }} |"
            echo "| 📦 **Total Packages** | ${{ steps.organize.outputs.total-packages }} |"
            echo ""
            echo "## 🚀 Quick Installation"
            echo ""
            echo "### Method 1: 📡 Add Repository Feed"
            echo "\`\`\`bash"
            echo "# Add custom package feed"
            echo "echo \"src/gz packages_custom https://${{ github.repository_owner }}.github.io/${{ github.event.repository.name }}/${{ matrix.branch }}/[ARCH]\" >> $repo_file"
            echo ""
            echo "# Update package database"
            echo "$update_cmd"
            echo ""
            echo "# Install any package"
            echo "$install_cmd [PACKAGE_NAME]"
            echo "\`\`\`"
            echo ""
            echo "### Method 2: 📥 Direct Download & Install"
            echo "\`\`\`bash"
            echo "# Download package directly"
            echo "wget \"https://${{ github.repository_owner }}.github.io/${{ github.event.repository.name }}/${{ matrix.branch }}/[ARCH]/[PACKAGE_FILE]\""
            echo ""
            echo "# Install downloaded package"
            echo "$install_cmd ./[PACKAGE_FILE]"
            echo "\`\`\`"
            echo ""
            echo "## 🏗️ Available Architectures"
            echo ""
          } > README.md
          
          for arch_dir in */; do
            if [[ -d "$arch_dir" ]]; then
              arch=$(basename "$arch_dir")
              count=$(find "$arch_dir" -type f -name "*.${{ env.PKG_EXT }}" 2>/dev/null | wc -l)
              
              if [[ "$count" -gt 0 ]]; then
                echo "### 🎯 $arch ($count packages)" >> README.md
                echo "" >> README.md
                echo "\`\`\`" >> README.md
                echo "Repository URL: https://${{ github.repository_owner }}.github.io/${{ github.event.repository.name }}/${{ matrix.branch }}/$arch" >> README.md
                echo "\`\`\`" >> README.md
                echo "" >> README.md
                echo "**📦 Available Packages:**" >> README.md
                find "$arch_dir" -type f -name "*.${{ env.PKG_EXT }}" -exec basename {} \; | sort | sed 's/^/- `/' | sed 's/$/`/' >> README.md
                echo "" >> README.md
              fi
            fi
          done
          
          {
            echo "## 🔧 Usage Examples"
            echo ""
            echo "\`\`\`bash"
            echo "# Example: Install a specific package for x86_64"
            echo "echo \"src/gz packages_custom https://${{ github.repository_owner }}.github.io/${{ github.event.repository.name }}/${{ matrix.branch }}/x86_64\" >> $repo_file"
            echo "$update_cmd"
            echo "$install_cmd your-package-name"
            echo "\`\`\`"
            echo ""
            echo "## 🆘 Support & Issues"
            echo ""
            echo "- 📋 **Repository**: [GitHub Repository](https://github.com/${{ github.repository }})"
            echo "- 🐛 **Report Issues**: [GitHub Issues](https://github.com/${{ github.repository }}/issues)"
            echo "- 📖 **Documentation**: [OpenWrt Wiki](https://openwrt.org/docs/guide-user/additional-software/opkg)"
            echo ""
            echo "---"
            echo ""
            echo "🤖 *Automatically built and deployed using GitHub Actions*"
          } >> README.md

      - name: 🌐 Deploy to GitHub Pages
        uses: peaceiris/actions-gh-pages@v4
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./releases
          destination_dir: .
          keep_files: true
          commit_message: "🚀 Deploy ${{ matrix.branch }} packages - $(date '+%Y-%m-%d %H:%M:%S')"
          user_name: 'github-actions[bot]'
          user_email: 'github-actions[bot]@users.noreply.github.com'

      - name: 📊 Deployment Summary
        run: |
          {
            echo "# 🚀 Deployment Summary: ${{ matrix.branch }}"
            echo ""
            echo "| Metric | Value |"
            echo "|--------|-------|"
            echo "| 🌿 **Branch** | \`${{ matrix.branch }}\` |"
            echo "| 📦 **Format** | \`${{ env.PKG_FORMAT }}\` |"
            echo "| 🏗️ **Architectures** | \`${{ steps.organize.outputs.total-archs }}\` |"
            echo "| 📦 **Total Packages** | \`${{ steps.organize.outputs.total-packages }}\` |"
            echo "| 🌐 **Repository URL** | [View Repository](https://${{ github.repository_owner }}.github.io/${{ github.event.repository.name }}/${{ matrix.branch }}) |"
            echo ""
            echo "✅ **Successfully deployed ${{ matrix.branch }} packages to GitHub Pages!**"
          } >> $GITHUB_STEP_SUMMARY