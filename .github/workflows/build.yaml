name: Build OpenWrt Packages

on:
  push:
    branches: [ main, master ]
    paths:
      - 'packages/**'
  pull_request:
    branches: [ main, master ]
    paths:
      - 'packages/**'
  workflow_dispatch:

jobs:
  build:
    name: ${{ matrix.arch }}-${{ matrix.branch }}
    runs-on: ubuntu-latest
    continue-on-error: true
    strategy:
      fail-fast: false
      matrix:
        arch:
          # - arm_cortex-a5_vfpv4
          # - arm_cortex-a7_neon-vfpv4
          # - arm_cortex-a8_vfpv3
          # - arm_cortex-a9
          # - arm_cortex-a9_vfpv3-d16
          # - arm_cortex-a9_neon
          # - arm_cortex-a15_neon-vfpv4
          - aarch64_cortex-a53
          - aarch64_cortex-a72
          - aarch64_cortex-a76
          - aarch64_generic
          # - mips_24kc
          # - mips_4kec
          # - mips_mips32
          # - mipsel_24kc
          # - mipsel_24kc_24kf
          # - mipsel_74kc
          # - mipsel_mips32
          # - mips64_octeonplus
          # - i386_pentium4
          - x86_64
        branch:
          - openwrt-23.05
          - openwrt-24.10
          - SNAPSHOT
        exclude:
          - arch: aarch64_cortex-a76
            branch: openwrt-23.05

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Prepare build environment
        run: |
          # Ensure proper permissions for workspace
          sudo chown -R $USER:$USER ${{ github.workspace }}
          
          # Verify packages directory exists
          if [ ! -d "${{ github.workspace }}/packages" ]; then
            echo "❌ Packages directory not found at ${{ github.workspace }}/packages"
            echo "Available directories:"
            ls -la ${{ github.workspace }}/
            exit 1
          fi
          
          echo "✅ Packages directory found"
          echo "Contents:"
          ls -la ${{ github.workspace }}/packages/

      - name: Build packages
        uses: openwrt/gh-action-sdk@main
        env:
          ARCH: ${{ matrix.arch }}-${{ matrix.branch }}
          FEEDNAME: packages_custom
          INDEX: 1
          FEED_DIR: ${{ github.workspace }}/packages
        continue-on-error: true

      - name: Check build results
        run: |
          echo "=== Build completed for ${{ matrix.arch }}-${{ matrix.branch }} ==="
          
          # Fix permissions after build
          sudo chown -R $USER:$USER ${{ github.workspace }} || true
          
          echo "Checking for built packages..."
          
          # Determine package extension based on branch
          if [[ "${{ matrix.branch }}" == "SNAPSHOT" ]]; then
            PKG_EXT="apk"
          else
            PKG_EXT="ipk"
          fi
          
          echo "Looking for .$PKG_EXT files..."
          echo "Expected path: bin/packages/${{ matrix.arch }}/packages_custom/"
          
          # Show full directory structure for debugging
          echo "=== Full bin directory structure ==="
          find bin/ -type f 2>/dev/null | head -20 || echo "No bin directory found"
          
          # Look for packages in common locations
          PACKAGE_FOUND=false
          
          # Check standard location
          if find bin/packages/${{ matrix.arch }}/packages_custom/ -name "*.$PKG_EXT" 2>/dev/null | head -1 >/dev/null; then
            echo "✅ Packages found in standard location:"
            find bin/packages/${{ matrix.arch }}/packages_custom/ -name "*.$PKG_EXT" 2>/dev/null
            PACKAGE_COUNT=$(find bin/packages/${{ matrix.arch }}/packages_custom/ -name "*.$PKG_EXT" 2>/dev/null | wc -l)
            echo "Package count: $PACKAGE_COUNT"
            PACKAGE_FOUND=true
          fi
          
          # Check alternative locations
          if [ "$PACKAGE_FOUND" = false ]; then
            echo "Checking alternative locations..."
            
            # Check if architecture directory exists but with packages in different location
            for possible_path in \
              "bin/packages/${{ matrix.arch }}/" \
              "bin/packages/" \
              "bin/" \
              "./" ; do
              
              if find "$possible_path" -name "*.$PKG_EXT" 2>/dev/null | head -1 >/dev/null; then
                echo "✅ Found packages in: $possible_path"
                find "$possible_path" -name "*.$PKG_EXT" 2>/dev/null
                PACKAGE_FOUND=true
                break
              fi
            done
          fi
          
          if [ "$PACKAGE_FOUND" = false ]; then
            echo "❌ No .$PKG_EXT packages found anywhere"
            echo "=== Available files in bin/ ==="
            find bin/ -type f 2>/dev/null | head -30 || echo "No files found"
            echo "=== Directory permissions ==="
            ls -la bin/ 2>/dev/null || echo "No bin directory"
            
            # Check for build logs or errors
            echo "=== Looking for build logs ==="
            find . -name "*.log" -o -name "*error*" 2>/dev/null | head -10
          fi

      - name: Store packages
        uses: actions/upload-artifact@v4
        with:
          name: packages-${{ matrix.branch }}-${{ matrix.arch }}
          path: |
            bin/packages/
            bin/targets/
          if-no-files-found: warn
          retention-days: 30

  deploy:
    name: Deploy ${{ matrix.branch }} packages
    needs: build
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        branch:
          - openwrt-23.05
          - openwrt-24.10
          - SNAPSHOT

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Download all artifacts for ${{ matrix.branch }}
        uses: actions/download-artifact@v4
        with:
          pattern: packages-${{ matrix.branch }}-*
          path: downloads/
          merge-multiple: false

      - name: Organize packages
        run: |
          mkdir -p releases/${{ matrix.branch }}
          cd downloads
          
          echo "Processing artifacts for ${{ matrix.branch }}..."
          echo "Available artifact directories:"
          ls -la
          
          # Determine package extension
          if [[ "${{ matrix.branch }}" == "SNAPSHOT" ]]; then
            PKG_EXT="apk"
          else
            PKG_EXT="ipk"
          fi
          
          for dir in packages-${{ matrix.branch }}-*/; do
            if [ -d "$dir" ]; then
              arch=$(echo "$dir" | sed 's/packages-${{ matrix.branch }}-\(.*\)\//\1/')
              echo "Processing architecture: $arch"
              echo "Directory contents:"
              find "$dir" -type f 2>/dev/null | head -10
              
              mkdir -p "../releases/${{ matrix.branch }}/$arch"
              
              # Look for packages in various possible locations within the artifact
              FOUND_PACKAGES=false
              
              # Check multiple possible paths
              for search_path in \
                "$dir" \
                "$dir/bin/packages/$arch/packages_custom" \
                "$dir/bin/packages/$arch" \
                "$dir/bin/packages" \
                "$dir/bin"; do
                
                if [ -d "$search_path" ] && find "$search_path" -name "*.$PKG_EXT" 2>/dev/null | head -1 >/dev/null; then
                  echo "Found .$PKG_EXT files in: $search_path"
                  find "$search_path" -name "*.$PKG_EXT" -exec cp {} "../releases/${{ matrix.branch }}/$arch/" \; 2>/dev/null
                  FOUND_PACKAGES=true
                  break
                fi
              done
              
              # Copy package index files from any location
              find "$dir" -name "Packages*" -exec cp {} "../releases/${{ matrix.branch }}/$arch/" \; 2>/dev/null || true
              
              if [ "$FOUND_PACKAGES" = false ]; then
                echo "⚠️ No .$PKG_EXT packages found for $arch"
              else
                COPIED_COUNT=$(ls "../releases/${{ matrix.branch }}/$arch/"*.$PKG_EXT 2>/dev/null | wc -l)
                echo "✅ Copied $COPIED_COUNT packages for $arch"
              fi
            fi
          done
          
          echo "=== Final organization results ==="
          find "../releases/${{ matrix.branch }}/" -name "*.$PKG_EXT" 2>/dev/null | wc -l | xargs echo "Total packages organized:"

      - name: Generate package index
        run: |
          cd releases/${{ matrix.branch }}
          
          # Determine package format
          if [[ "${{ matrix.branch }}" == "SNAPSHOT" ]]; then
            PKG_EXT="apk"
            PKG_FORMAT="apk"
          else
            PKG_EXT="ipk"
            PKG_FORMAT="ipk"
          fi
          
          for arch_dir in */; do
            if [ -d "$arch_dir" ]; then
              arch=$(basename "$arch_dir")
              echo "Processing index for $arch"
              
              cd "$arch_dir"
              
              # Check if we have packages
              if ls *.$PKG_EXT 1> /dev/null 2>&1; then
                echo "Generating package index for $arch (format: $PKG_FORMAT)"
                
                # Remove existing index
                rm -f Packages Packages.gz
                
                # Generate new index
                {
                  for pkg in *.$PKG_EXT; do
                    if [ -f "$pkg" ]; then
                      # Extract package name (remove extension)
                      pkg_name=$(basename "$pkg" .$PKG_EXT)
                      
                      echo "Package: $pkg_name"
                      echo "Version: $(date +%Y.%m.%d)-1"
                      echo "Architecture: $arch"
                      echo "Filename: $pkg"
                      echo "Size: $(stat -c%s "$pkg")"
                      echo "SHA256sum: $(sha256sum "$pkg" | cut -d' ' -f1)"
                      
                      if [ "$PKG_FORMAT" = "apk" ]; then
                        echo "Description: Custom OpenWrt package built from source"
                      else
                        echo "Description: Custom OpenWrt package built from source"
                        echo "Maintainer: GitHub Actions"
                      fi
                      echo ""
                    fi
                  done
                } > Packages
                
                # Create compressed version
                gzip -k Packages
                
                echo "✅ Generated index for $arch ($(ls *.$PKG_EXT | wc -l) packages)"
              else
                echo "⚠️  No packages found for $arch"
              fi
              
              cd ..
            fi
          done

      - name: Create release info
        run: |
          cd releases/${{ matrix.branch }}
          
          # Determine format info
          if [[ "${{ matrix.branch }}" == "SNAPSHOT" ]]; then
            FORMAT="APK (Alpine Package Keeper)"
            INSTALL_CMD="apk"
            REPO_FILE="/etc/apk/repositories"
            UPDATE_CMD="apk update"
            INSTALL_SYNTAX="apk add"
          else
            FORMAT="IPK (Itsy Package)"
            INSTALL_CMD="opkg"
            REPO_FILE="/etc/opkg/customfeeds.conf"
            UPDATE_CMD="opkg update"
            INSTALL_SYNTAX="opkg install"
          fi
          
          cat > README.md << EOF
          # OpenWrt Packages - ${{ matrix.branch }}

          Built on: $(date)  
          Commit: ${{ github.sha }}  
          Branch: ${{ github.ref_name }}  

          ## Package Format
          - **Format**: $FORMAT

          ## Installation

          ### Add Repository
          \`\`\`bash
          # Add custom feed/repository
          echo "src/gz packages_custom https://raw.githubusercontent.com/${{ github.repository }}/releases/${{ matrix.branch }}/[ARCH]" >> $REPO_FILE

          # Update package lists
          $UPDATE_CMD

          # Install package
          $INSTALL_SYNTAX [PACKAGE_NAME]
          \`\`\`

          Replace \`[ARCH]\` with your device architecture and \`[PACKAGE_NAME]\` with the desired package name.

          ## Available Architectures

          EOF
          
          total_packages=0
          for arch_dir in */; do
            if [ -d "$arch_dir" ]; then
              arch=$(basename "$arch_dir")
              
              # Count packages based on branch type
              if [[ "${{ matrix.branch }}" == "SNAPSHOT" ]]; then
                count=$(find "$arch_dir" -name "*.apk" 2>/dev/null | wc -l)
              else
                count=$(find "$arch_dir" -name "*.ipk" 2>/dev/null | wc -l)
              fi
              
              if [ "$count" -gt 0 ]; then
                echo "- **$arch** ($count packages)" >> README.md
                total_packages=$((total_packages + count))
              fi
            fi
          done
          
          echo "" >> README.md
          echo "**Total: $total_packages packages across all architectures**" >> README.md
          echo "" >> README.md
          echo "## Usage Notes" >> README.md
          echo "- Packages are built automatically from the main branch" >> README.md
          echo "- Each architecture has its own subdirectory" >> README.md
          echo "- Package indices are automatically generated" >> README.md

      - name: Setup Git
        run: |
          git config --global user.email "action@github.com"
          git config --global user.name "GitHub Action"

      - name: Deploy to releases branch
        run: |
          # Fetch or create releases branch
          git fetch origin releases:releases 2>/dev/null || {
            echo "Creating new releases branch"
            git checkout --orphan releases
            git rm -rf . 2>/dev/null || true
            
            # Create initial README
            cat > README.md << 'EOF'
          # OpenWrt Packages Repository

          This branch contains built OpenWrt packages organized by release version.

          ## Available Releases
          - **openwrt-23.05** - Stable release (IPK format)
          - **openwrt-24.10** - Stable release (IPK format)  
          - **SNAPSHOT** - Development branch (APK format)

          Each release directory contains packages organized by architecture.
          EOF
            
            git add README.md
            git commit -m "Initial commit for releases branch"
            git push origin releases
          }
          
          # Switch to releases branch
          git checkout releases
          
          # Update packages for this branch
          mkdir -p ${{ matrix.branch }}
          
          # Copy built packages
          if [ -d "releases/${{ matrix.branch }}" ]; then
            cp -r releases/${{ matrix.branch }}/* ${{ matrix.branch }}/ 2>/dev/null || true
          fi
          
          # Add changes
          git add ${{ matrix.branch }}/
          
          # Check if there are changes to commit
          if git diff --staged --quiet; then
            echo "ℹ️ No changes detected for ${{ matrix.branch }}"
          else
            # Count total packages for commit message
            if [[ "${{ matrix.branch }}" == "SNAPSHOT" ]]; then
              PKG_COUNT=$(find ${{ matrix.branch }}/ -name "*.apk" 2>/dev/null | wc -l)
            else
              PKG_COUNT=$(find ${{ matrix.branch }}/ -name "*.ipk" 2>/dev/null | wc -l)
            fi
            
            git commit -m "Update ${{ matrix.branch }} packages ($PKG_COUNT total) - $(date '+%Y-%m-%d %H:%M:%S')"
            git push origin releases
            echo "🚀 Successfully updated ${{ matrix.branch }} with $PKG_COUNT packages"
          fi