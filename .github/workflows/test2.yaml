name: Build OpenWrt Packages

on:
  push:
    branches: [ main, master ]
    paths:
      - 'packages/**'
  pull_request:
    branches: [ main, master ]
    paths:
      - 'packages/**'
  workflow_dispatch:

env:
  FORCE_UNSAFE_CONFIGURE: 1

jobs:
  build:
    name: Build ${{ matrix.openwrt.version }} ${{ matrix.target.arch }}
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        openwrt:
          - version: "24.10.1"
            branch: "24.10"
            pkg_ext: "ipk"
            base_url: "https://downloads.openwrt.org/releases/24.10.1/targets"
          - version: "23.05.5"
            branch: "23.05"
            pkg_ext: "ipk"
            base_url: "https://downloads.openwrt.org/releases/23.05.5/targets"
          - version: "SNAPSHOT"
            branch: "SNAPSHOT"
            pkg_ext: "apk"
            base_url: "https://downloads.openwrt.org/snapshots/targets"
        target:
          - arch: x86_64
            target_system: "x86/64"
            target_name: "x86-64"
            sdk_suffix_snapshots: "_gcc-14.3.0_musl.Linux-x86_64.tar.zst"
            sdk_suffix_24_10: "_gcc-13.3.0_musl.Linux-x86_64.tar.zst"
            sdk_suffix_23_05: "_gcc-12.3.0_musl.Linux-x86_64.tar.xz"
          - arch: aarch64_generic
            target_system: "armsr/armv8"
            target_name: "armsr-armv8"
            sdk_suffix_snapshots: "_gcc-14.3.0_musl.Linux-x86_64.tar.zst"
            sdk_suffix_24_10: "_gcc-13.3.0_musl.Linux-x86_64.tar.zst"
            sdk_suffix_23_05: "_gcc-12.3.0_musl.Linux-x86_64.tar.xz"
          - arch: aarch64_cortex-a53
            target_system: "mediatek/filogic"
            target_name: "mediatek-filogic"
            sdk_suffix_snapshots: "_gcc-14.3.0_musl.Linux-x86_64.tar.zst"
            sdk_suffix_24_10: "_gcc-13.3.0_musl.Linux-x86_64.tar.zst"
            sdk_suffix_23_05: "_gcc-12.3.0_musl.Linux-x86_64.tar.xz"
          - arch: aarch64_cortex-a72
            target_system: "bcm27xx/bcm2711"
            target_name: "bcm27xx-bcm2711"
            sdk_suffix_snapshots: "_gcc-14.3.0_musl.Linux-x86_64.tar.zst"
            sdk_suffix_24_10: "_gcc-13.3.0_musl.Linux-x86_64.tar.zst"
            sdk_suffix_23_05: "_gcc-12.3.0_musl.Linux-x86_64.tar.xz"
          - arch: aarch64_cortex-a76
            target_system: "rockchip/armv8"
            target_name: "rockchip-armv8"
            sdk_suffix_snapshots: "_gcc-14.3.0_musl.Linux-x86_64.tar.zst"
            sdk_suffix_24_10: "_gcc-13.3.0_musl.Linux-x86_64.tar.zst"
            sdk_suffix_23_05: "_gcc-12.3.0_musl.Linux-x86_64.tar.xz"

    steps:
    - name: 🔄 Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: 🗑️ Free up disk space
      run: |
        sudo rm -rf /usr/share/dotnet /opt/ghc /usr/local/share/boost "$AGENT_TOOLSDIRECTORY"
        echo "✅ Disk space freed"

    - name: 🛠️ Setup build environment
      run: |
        sudo apt-get update -qq
        sudo apt-get install -y -qq build-essential ecj fastjar file g++ gawk gettext git java-propose-classpath libelf-dev libncurses5-dev libncursesw5-dev libssl-dev python3 python3-setuptools python3-dev rsync subversion swig time unzip wget xsltproc zlib1g-dev zstd libtool libtool-bin autoconf automake pkg-config
        echo "✅ Build environment ready"

    - name: 🌐 Generate SDK URL and filename
      run: |
        if [ "${{ matrix.openwrt.version }}" = "SNAPSHOT" ]; then
          SDK_URL="${{ matrix.openwrt.base_url }}/${{ matrix.target.target_system }}/openwrt-sdk-${{ matrix.target.target_name }}${{ matrix.target.sdk_suffix_snapshots }}"
          SDK_FILENAME="openwrt-sdk.tar.zst"
        elif [ "${{ matrix.openwrt.version }}" = "24.10.1" ]; then
          SDK_URL="${{ matrix.openwrt.base_url }}/${{ matrix.target.target_system }}/openwrt-sdk-${{ matrix.openwrt.version }}-${{ matrix.target.target_name }}${{ matrix.target.sdk_suffix_24_10 }}"
          SDK_FILENAME="openwrt-sdk.tar.zst"
        elif [ "${{ matrix.openwrt.version }}" = "23.05.5" ]; then
          SDK_URL="${{ matrix.openwrt.base_url }}/${{ matrix.target.target_system }}/openwrt-sdk-${{ matrix.openwrt.version }}-${{ matrix.target.target_name }}${{ matrix.target.sdk_suffix_23_05 }}"
          SDK_FILENAME="openwrt-sdk.tar.xz"
        else
          echo "❌ Unsupported OpenWrt version: ${{ matrix.openwrt.version }}"
          exit 1
        fi
        echo "SDK_URL=$SDK_URL" >> $GITHUB_ENV
        echo "SDK_FILENAME=$SDK_FILENAME" >> $GITHUB_ENV
        echo "✅ SDK URL generated"

    - name: 📥 Download and extract OpenWrt SDK
      run: |
        echo "📥 Downloading SDK..."
        for i in {1..5}; do
          if wget --tries=3 --retry-connrefused -q "$SDK_URL" -O "$SDK_FILENAME"; then
            file_size=$(stat -c%s "$SDK_FILENAME")
            [ "$file_size" -lt 10000000 ] && { echo "❌ File too small ($file_size bytes)"; exit 1; }
            if [[ "$SDK_FILENAME" == *.tar.zst ]]; then
              tar --zstd -xf "$SDK_FILENAME"
            elif [[ "$SDK_FILENAME" == *.tar.xz ]]; then
              tar -xf "$SDK_FILENAME"
            fi
            SDK_DIR=$(find . -maxdepth 1 -type d -name "openwrt-sdk-*" | head -1)
            [ -z "$SDK_DIR" ] && { echo "❌ SDK directory not found"; ls -la; exit 1; }
            echo "SDK_PATH=$(pwd)/$SDK_DIR" >> $GITHUB_ENV
            rm -f "$SDK_FILENAME"
            echo "✅ SDK downloaded and extracted"
            exit 0
          fi
          echo "🔄 Retry $i/5 failed"
          sleep 10
        done
        echo "❌ Download failed after 5 attempts"
        curl -I "$SDK_URL" || true
        exit 1

    - name: 📋 Prepare SDK feeds
      run: |
        cd "$SDK_PATH"
        echo "src-link custom $(pwd)/../packages" >> feeds.conf.default
        ./scripts/feeds update -a >/dev/null 2>&1
        ./scripts/feeds install -a >/dev/null 2>&1
        echo "✅ Feeds prepared"

    - name: 📦 Get package list
      id: packages
      run: |
        PACKAGES=""
        for pkg in ./packages/*/; do
          [ -f "$pkg/Makefile" ] && PACKAGES="$PACKAGES $(basename "$pkg")"
        done
        PACKAGES=$(echo "$PACKAGES" | sed 's/^ *//')
        echo "packages=$PACKAGES" >> $GITHUB_OUTPUT
        [ -z "$PACKAGES" ] && { echo "❌ No packages found"; exit 1; }
        echo "✅ Package list retrieved"

    - name: ⚙️ Configure SDK
      run: |
        cd "$SDK_PATH"
        make defconfig >/dev/null 2>&1
        echo "✅ SDK configured"

    - name: 🔨 Build packages
      run: |
        cd "$SDK_PATH"
        FAILED_PACKAGES=""
        BUILT_PACKAGES=""
        for pkg in ${{ steps.packages.outputs.packages }}; do
          echo "🔨 Building $pkg..."
          make package/$pkg/clean V=s >/dev/null 2>&1 || true
          if timeout 30m make package/$pkg/compile V=s J=1 >/dev/null 2>&1; then
            echo "✅ $pkg built"
            BUILT_PACKAGES="$BUILT_PACKAGES $pkg"
          else
            echo "❌ $pkg failed"
            FAILED_PACKAGES="$FAILED_PACKAGES $pkg"
            echo "📜 Error details:"
            [ -f "logs/package/compile/$pkg.txt" ] && tail -50 "logs/package/compile/$pkg.txt" || echo "No log available"
          fi
        done
        BUILT_PACKAGES=$(echo "$BUILT_PACKAGES" | sed 's/^ *//')
        FAILED_PACKAGES=$(echo "$FAILED_PACKAGES" | sed 's/^ *//')
        echo "BUILT_PACKAGES=$BUILT_PACKAGES" >> $GITHUB_ENV
        echo "FAILED_PACKAGES=$FAILED_PACKAGES" >> $GITHUB_ENV
        echo "## Build Summary" >> $GITHUB_STEP_SUMMARY
        echo "- Version: ${{ matrix.openwrt.version }}" >> $GITHUB_STEP_SUMMARY
        echo "- Arch: ${{ matrix.target.arch }}" >> $GITHUB_STEP_SUMMARY
        echo "- Format: .${{ matrix.openwrt.pkg_ext }}" >> $GITHUB_STEP_SUMMARY
        [ -n "$BUILT_PACKAGES" ] && echo "- ✅ Built: $BUILT_PACKAGES" >> $GITHUB_STEP_SUMMARY
        [ -n "$FAILED_PACKAGES" ] && echo "- ❌ Failed: $FAILED_PACKAGES" >> $GITHUB_STEP_SUMMARY

    - name: 📂 Collect built packages
      run: |
        cd "$SDK_PATH"
        mkdir -p "../artifacts/${{ matrix.openwrt.branch }}/${{ matrix.target.arch }}"
        if [ -n "$BUILT_PACKAGES" ]; then
          find bin/packages -name "*.${{ matrix.openwrt.pkg_ext }}" -type f | while read pkg_file; do
            package_name=$(basename "$pkg_file" | sed 's/_.*$//')
            echo " $BUILT_PACKAGES " | grep -q " $package_name " && cp "$pkg_file" "../artifacts/${{ matrix.openwrt.branch }}/${{ matrix.target.arch }}/"
          done
          find bin/targets -name "*.${{ matrix.openwrt.pkg_ext }}" -type f 2>/dev/null | xargs -I {} cp {} "../artifacts/${{ matrix.openwrt.branch }}/${{ matrix.target.arch }}/" || true
        fi
        ls "../artifacts/${{ matrix.openwrt.branch }}/${{ matrix.target.arch }}/"*.${{ matrix.openwrt.pkg_ext }} >/dev/null 2>&1 && echo "✅ Packages collected" || echo "⚠️ No packages collected"

    - name: ⬆️ Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: packages-${{ matrix.openwrt.branch }}-${{ matrix.target.arch }}
        path: artifacts/${{ matrix.openwrt.branch }}/${{ matrix.target.arch }}/*.${{ matrix.openwrt.pkg_ext }}

  release:
    name: Upload to releases branch
    needs: build
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
    
    steps:
    - name: 🔄 Checkout releases branch
      uses: actions/checkout@v4
      with:
        ref: releases
        token: ${{ secrets.GITHUB_TOKEN }}
        fetch-depth: 0

    - name: 🛠️ Setup Git
      run: |
        git config --global user.email "action@github.com"
        git config --global user.name "GitHub Action"
        echo "✅ Git configured"

    - name: 📁 Create directory structure
      run: |
        mkdir -p packages/{24.10,23.05,SNAPSHOT}/{x86_64,aarch64_generic,aarch64_cortex-a53,aarch64_cortex-a72,aarch64_cortex-a76}
        echo "✅ Directory structure created"

    - name: 📥 Download all artifacts
      uses: actions/download-artifact@v4
      with:
        path: temp-artifacts

    - name: 📦 Organize packages
      run: |
        for artifact_dir in temp-artifacts/packages-*; do
          if [ -d "$artifact_dir" ]; then
            artifact_name=$(basename "$artifact_dir")
            branch=$(echo "$artifact_name" | sed 's/packages-//' | sed 's/-[^-]*$//')
            arch=$(echo "$artifact_name" | sed 's/.*-//')
            target_dir="packages/$branch/$arch"
            pkg_ext=$([ "$branch" = "SNAPSHOT" ] && echo "apk" || echo "ipk")
            mkdir -p "$target_dir"
            if ls "$artifact_dir"/*.$pkg_ext >/dev/null 2>&1; then
              cp "$artifact_dir"/*.$pkg_ext "$target_dir/"
              cd "$target_dir"
              echo "# Packages for $arch" > README.md
              echo "Built: $(date -u +"%Y-%m-%d %H:%M:%S UTC")" >> README.md
              echo "Version: $branch" >> README.md
              echo "Format: .$pkg_ext" >> README.md
              echo "" >> README.md
              echo "## Packages:" >> README.md
              for pkg in *.$pkg_ext; do
                [ -f "$pkg" ] && echo "- \`$pkg\` ($(numfmt --to=iec --suffix=B $(stat -c%s "$pkg")))" >> README.md
              done
              cd - >/dev/null
              echo "✅ Packages organized for $branch/$arch"
            else
              cd "$target_dir"
              echo "# No packages" > README.md
              echo "Built: $(date -u +"%Y-%m-%d %H:%M:%S UTC")" >> README.md
              echo "Version: $branch" >> README.md
              echo "No packages built." >> README.md
              cd - >/dev/null
              echo "⚠️ No packages for $branch/$arch"
            fi
          fi
        done

    - name: 📝 Generate main index
      run: |
        echo "# 📦 OpenWrt Packages" > packages/README.md
        echo "Last updated: $(date -u +"%Y-%m-%d %H:%M:%S UTC")" >> packages/README.md
        echo "" >> packages/README.md
        for version_dir in packages/*/; do
          version_name=$(basename "$version_dir")
          echo "## 🔧 OpenWrt $version_name" >> packages/README.md
          pkg_ext=$([ "$version_name" = "SNAPSHOT" ] && echo "apk" || echo "ipk")
          echo "📋 Format: .$pkg_ext" >> packages/README.md
          echo "" >> packages/README.md
          echo "### 🏗️ Architectures:" >> packages/README.md
          total_packages=0
          for arch_dir in "$version_dir"*/; do
            arch_name=$(basename "$arch_dir")
            package_count=$(find "$arch_dir" -name "*.$pkg_ext" | wc -l)
            total_packages=$((total_packages + package_count))
            [ $package_count -gt 0 ] && echo "- [\`$arch_name\`]($version_name/$arch_name/) ✅ $package_count pkgs" >> packages/README.md || echo "- [\`$arch_name\`]($version_name/$arch_name/) ❌ 0 pkgs" >> packages/README.md
          done
          echo "" >> packages/README.md
          echo "**Total: $total_packages pkgs**" >> packages/README.md
          echo "" >> packages/README.md
        done
        cat >> packages/README.md << 'EOF'
        ## 🚀 Installation
        
        ### Stable (IPK):
        ```bash
        echo "src/gz custom https://raw.githubusercontent.com/${{ github.repository }}/releases/packages/[VERSION]/[ARCH]" >> /etc/opkg/customfeeds.conf
        opkg update
        opkg install [PACKAGE]
        ```
        
        ### SNAPSHOT (APK):
        ```bash
        echo "src/gz custom https://raw.githubusercontent.com/${{ github.repository }}/releases/packages/SNAPSHOT/[ARCH]" >> /etc/apk/repositories.d/custom.list
        apk update
        apk add [PACKAGE]
        ```
        
        ## 🔧 Architectures
        
        | Arch | Description | Devices |
        |------|-------------|---------|
        | `x86_64` | 64-bit x86 | PC Engines |
        | `aarch64_generic` | Generic ARM64 | ARM64 devices |
        | `aarch64_cortex-a53` | Cortex-A53 | MediaTek MT7622 |
        | `aarch64_cortex-a72` | Cortex-A72 | Raspberry Pi 4 |
        | `aarch64_cortex-a76` | Cortex-A76 | Rockchip RK3568 |
        
        ## 📝 Notes
        - Replace `[VERSION]` with `24.10`, `23.05`, or `SNAPSHOT`
        - Replace `[ARCH]` with architecture
        - Replace `[PACKAGE]` with package name
        EOF
        echo "✅ Main index generated"

    - name: ⬆️ Commit and push changes
      run: |
        git add packages/
        if git diff --staged --quiet; then
          echo "✅ No changes to commit"
        else
          total_packages=$(find packages/ -name "*.ipk" -o -name "*.apk" | wc -l)
          git commit -m "📦 Update packages ($total_packages total) - $(date -u +"%Y-%m-%d %H:%M:%S UTC")
          Built for: 24.10.1, 23.05.5, SNAPSHOT
          Arch: x86_64, aarch64_generic, aarch64_cortex-a53, aarch64_cortex-a72, aarch64_cortex-a76"
          git push origin releases
          echo "✅ Packages uploaded ($total_packages total)"
        fi