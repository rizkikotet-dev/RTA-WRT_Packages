name: Release OpenWRT Packages

on:
  workflow_dispatch:

jobs:
  release:
    name: Publish Packages
    needs: build
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout releases branch
        uses: actions/checkout@v4
        with:
          ref: releases
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Configure Git
        run: |
          git config --global user.email "actions@github.com"
          git config --global user.name "OpenWRT Package Builder"
          git config --global pull.rebase true

      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Process artifacts
        run: |
          # Create base directory
          mkdir -p packages
          
          # Process each artifact
          for artifact in artifacts/packages_*; do
            if [ -d "$artifact" ]; then
              # Extract arch and branch from artifact name
              name=$(basename "$artifact")
              arch_branch=${name#packages_}
              arch=${arch_branch%-*}
              branch=${arch_branch##*-}
              
              echo "Processing: $name (arch: $arch, branch: $branch)"
              
              # Create target directory
              target_dir="packages/$branch/$arch"
              mkdir -p "$target_dir"
              
              # Copy packages
              if [ -d "$artifact/releases/$branch/$arch" ]; then
                rsync -av --ignore-missing-args \
                  "$artifact/releases/$branch/$arch/" \
                  "$target_dir/"
              fi
              
              # Verify we got packages
              if [ -z "$(find "$target_dir" -name '*.ipk' -o -name '*.apk')" ]; then
                echo "::warning::No packages found in $target_dir"
              fi
            fi
          done



      - name: Update repository metadata
        run: |
          # Count packages and create metadata
          total_packages=$(find packages -name '*.ipk' -o -name '*.apk' | wc -l)
          total_branches=$(find packages -mindepth 1 -maxdepth 1 -type d | wc -l)
          total_archs=$(find packages -mindepth 2 -maxdepth 2 -type d | wc -l)
          
          # Create repository metadata
          cat > packages/repository.json <<EOF
          {
            "repository": {
              "version": "1.0",
              "date": "$(date -u '+%Y-%m-%dT%H:%M:%SZ')",
              "packages": $total_packages,
              "branches": $total_branches,
              "architectures": $total_archs
            }
          }
          EOF
          
          # Generate README
          {
            echo "# OpenWRT Custom Packages Repository"
            echo ""
            echo "This repository contains pre-built packages for various OpenWRT versions and architectures."
            echo ""
            echo "## Repository Stats"
            echo "- Last updated: $(date -u '+%Y-%m-%d %H:%M:%S UTC')"
            echo "- Total packages: $total_packages"
            echo "- Supported OpenWRT versions:"
            
            for branch in packages/*; do
              if [ -d "$branch" ]; then
                branch_name=$(basename "$branch")
                branch_packages=$(find "$branch" -name '*.ipk' -o -name '*.apk' | wc -l)
                echo "  - $branch_name ($branch_packages packages)"
              fi
            done
            
            echo ""
            echo "## Usage"
            echo ""
            echo "## Available Packages by Architecture"
            echo ""
            
            for branch in packages/*; do
              if [ -d "$branch" ]; then
                branch_name=$(basename "$branch")
                echo "### $branch_name"
                echo ""
                for arch in "$branch"/*; do
                  if [ -d "$arch" ]; then
                    arch_name=$(basename "$arch")
                    arch_packages=$(find "$arch" -name '*.ipk' -o -name '*.apk' | wc -l)
                    if [ $arch_packages -gt 0 ]; then
                      echo "- **$arch_name**: $arch_packages packages"
                    fi
                  fi
                done
                echo ""
              fi
            done
            
            echo "## Download"
            echo ""
            echo "Browse and download packages directly from the [releases branch](https://github.com/${{ github.repository }}/tree/releases/packages)."
          } > README.md

      - name: Setup Git LFS and optimize repository
        run: |
          # Install and configure Git LFS
          git lfs install
          
          # Configure Git for large files
          git config http.postBuffer 524288000
          git config http.maxRequestBuffer 100M
          git config core.compression 0
          
          # Track large files with LFS
          echo "*.ipk filter=lfs diff=lfs merge=lfs -text" >> .gitattributes
          echo "*.apk filter=lfs diff=lfs merge=lfs -text" >> .gitattributes
          echo "*.tar.gz filter=lfs diff=lfs merge=lfs -text" >> .gitattributes
          
          # Add .gitattributes if it doesn't exist
          if [ ! -f .gitattributes ]; then
            git add .gitattributes
            git commit -m "Add Git LFS configuration" || true
          fi

      - name: Clean up old packages (keep last 5 builds per arch)
        run: |
          # Clean up old packages to prevent repository from growing too large
          for branch_dir in packages/*; do
            if [ -d "$branch_dir" ]; then
              branch=$(basename "$branch_dir")
              echo "Cleaning up old packages for branch: $branch"
              
              for arch_dir in "$branch_dir"/*; do
                if [ -d "$arch_dir" ]; then
                  arch=$(basename "$arch_dir")
                  
                  # Keep only latest packages (remove old versions)
                  cd "$arch_dir"
                  
                  # Group packages by name and keep only latest version
                  for pkg_pattern in $(ls *.ipk *.apk 2>/dev/null | sed 's/_[0-9].*//' | sort -u); do
                    # Keep only the newest version of each package
                    ls -t ${pkg_pattern}_* 2>/dev/null | tail -n +2 | xargs rm -f
                  done
                  
                  cd - > /dev/null
                fi
              done
            fi
          done

      - name: Commit and push changes in batches
        run: |
          # Check repository size
          repo_size=$(du -sm . | cut -f1)
          echo "Repository size: ${repo_size}MB"
          
          if [ $repo_size -gt 1000 ]; then
            echo "Repository too large, implementing cleanup strategy"
            
            # Remove oldest packages to keep repo under 1GB
            find packages -name "*.ipk" -o -name "*.apk" | head -n -100 | xargs rm -f
          fi
          
          # Add files in batches to avoid large commits
          total_packages=$(find packages -name '*.ipk' -o -name '*.apk' | wc -l)
          
          if [ $total_packages -gt 0 ]; then
            echo "Adding metadata files first..."
            git add packages/repository.json README.md .gitattributes 2>/dev/null || true
            
            if ! git diff --cached --quiet; then
              git commit -m "üìù Update repository metadata $(date -u '+%Y-%m-%d')" \
                        -m "Total packages: $total_packages"
            fi
            
            echo "Adding packages in batches..."
            # Add packages by architecture to avoid huge commits
            for branch_dir in packages/*; do
              if [ -d "$branch_dir" ]; then
                branch=$(basename "$branch_dir")
                
                for arch_dir in "$branch_dir"/*; do
                  if [ -d "$arch_dir" ]; then
                    arch=$(basename "$arch_dir")
                    arch_packages=$(find "$arch_dir" -name '*.ipk' -o -name '*.apk' | wc -l)
                    
                    if [ $arch_packages -gt 0 ]; then
                      echo "Adding packages for $branch/$arch ($arch_packages packages)..."
                      git add "$arch_dir"
                      
                      if ! git diff --cached --quiet; then
                        git commit -m "üì¶ Add packages for $arch ($branch)" \
                                  -m "Architecture: $arch" \
                                  -m "Branch: $branch" \
                                  -m "Packages: $arch_packages"
                        
                        # Push immediately to avoid large batches
                        echo "Pushing $branch/$arch packages..."
                        git push origin releases || {
                          echo "Push failed, retrying with different strategy..."
                          sleep 5
                          git push origin releases --force-with-lease
                        }
                      fi
                    fi
                  fi
                done
              fi
            done
          else
            echo "No packages to commit"
          fi