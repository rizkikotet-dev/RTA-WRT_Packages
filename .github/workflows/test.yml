name: Release & Deploy OpenWRT Packages

on:
  workflow_dispatch:
    inputs:
      runs_id:
        description: 'Run ID to build packages'
        required: true
        type: string
      force_cleanup:
        description: 'Force repository cleanup'
        required: false
        type: boolean
        default: false

env:
  FORCE_UNSAFE_CONFIGURE: 1
  MAX_REPO_SIZE_GB: 5
  SOURCE_REPO: ${{ github.repository }}

jobs:
  release:
    name: üöÄ Release & Deploy Packages
    runs-on: ubuntu-latest

    steps:
      - name: üéØ Release initialization
        run: |
          echo "::notice title=Release Started::üöÄ Starting package release process"
          echo "### üöÄ Release Pipeline" >> $GITHUB_STEP_SUMMARY
          echo "- **Trigger**: ${{ github.event_name }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Run ID**: ${{ github.event.inputs.runs_id }}" >> $GITHUB_STEP_SUMMARY

      - name: üì• Checkout releases branch
        uses: actions/checkout@v4
        with:
          ref: releases
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: üîß Setup release environment
        run: |
          # Install dependencies
          sudo apt-get update -qq
          sudo apt-get install -y --no-install-recommends jq zstd pv curl
          
          # Configure Git
          git config user.email "actions@github.com"
          git config user.name "ü§ñ OpenWRT Package Bot"
          git config pull.rebase true
          git config core.compression 9
          git config pack.compression 9
          
          # Create .gitattributes for better handling of binary files
          cat > .gitattributes <<EOF
          *.ipk binary
          *.apk binary
          *.tar.gz binary
          *.tar.xz binary
          Packages text
          README.md text
          *.json text
          EOF

      - name: ‚¨áÔ∏è Download artifacts
        uses: actions/download-artifact@v4
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          run-id: ${{ github.event.inputs.runs_id }}
          merge-multiple: true
          path: ./temp-artifacts

      - name: üì¶ Process artifacts
        id: download
        run: |
          if [ ! -d "./temp-artifacts" ]; then
            echo "::error::No artifacts directory found"
            echo "success=false" >> $GITHUB_OUTPUT
            exit 1
          fi
          
          echo "üîç Listing artifact structure..."
          find ./temp-artifacts -type d | head -20
          echo ""
          find ./temp-artifacts -name "*.ipk" -o -name "*.apk" | head -10
          echo ""
          
          total_packages=$(find ./temp-artifacts -name "*.ipk" -o -name "*.apk" 2>/dev/null | wc -l)
          echo "üìä Found $total_packages total packages"
          
          if [ $total_packages -eq 0 ]; then
            echo "::warning::No packages found in artifacts"
            echo "success=false" >> $GITHUB_OUTPUT
            exit 0
          fi
          
          echo "success=true" >> $GITHUB_OUTPUT
          echo "total_packages=$total_packages" >> $GITHUB_OUTPUT

      - name: üîÑ Process and organize packages
        if: steps.download.outputs.success == 'true'
        run: |
          echo "::group::üîÑ Processing artifacts"
          
          # Debug: List all artifacts first
          echo "üîç Available artifacts:"
          find ./temp-artifacts -type d -name "*packages*" || true
          find ./temp-artifacts -type f -name "*.ipk" -o -name "*.apk" | head -10 || true
          
          mkdir -p packages
          total_processed=0
          
          # Fixed: Properly handle all package files
          while IFS= read -r -d '' package_file; do
            if [ ! -f "$package_file" ]; then
              continue
            fi
            
            # Extract directory info from path
            package_dir=$(dirname "$package_file")
            relative_path=${package_dir#./temp-artifacts/}
            
            echo "üìÑ Found package: $package_file"
            echo "  üìÅ In directory: $relative_path"
            
            # Fixed: Improved parsing logic
            arch=""
            branch=""
            
            # Strategy 1: Parse from directory name like packages_arch-branch
            if echo "$relative_path" | grep -q "packages_"; then
              dir_name=$(echo "$relative_path" | grep -o "packages_[^/]*" | head -1)
              if [ -n "$dir_name" ]; then
                metadata=${dir_name#packages_}
                # Split by last dash to get arch and branch
                arch=$(echo "$metadata" | sed 's/-[^-]*$//')
                branch=$(echo "$metadata" | sed 's/.*-//')
              fi
            fi
            
            # Strategy 2: Parse from path segments
            if [ -z "$arch" ] || [ -z "$branch" ]; then
              # Fixed: Better path parsing
              path_parts=($(echo "$relative_path" | tr '/' ' '))
              for part in "${path_parts[@]}"; do
                case "$part" in
                  # Architectures
                  "aarch64_cortex-a53"|"aarch64_cortex-a72"|"aarch64_generic"| \
                  "arm_cortex-a15_neon-vfpv4"|"arm_cortex-a7_neon-vfpv4"|"arm_cortex-a9"| \
                  "mips_24kc"|"mipsel_24kc"|"x86_64"|"i386")
                    arch="$part"
                    ;;
                  # Branches
                  "23.05"|"24.10"|"SNAPSHOT"|"snapshot"|"openwrt-23.05"|"openwrt-24.10")
                    case "$part" in
                      "openwrt-"*) branch=${part#openwrt-} ;;
                      "snapshot") branch="SNAPSHOT" ;;
                      *) branch="$part" ;;
                    esac
                    ;;
                esac
              done
            fi
            
            # Fallback strategy
            if [ -z "$arch" ]; then
              arch=$(echo "$relative_path" | awk -F'/' '{print $(NF-1)}')
              [ -z "$arch" ] && arch="unknown"
            fi
            if [ -z "$branch" ]; then
              branch=$(echo "$relative_path" | awk -F'/' '{print $NF}')
              [ -z "$branch" ] && branch="SNAPSHOT"
            fi
            
            echo "  üèóÔ∏è Detected Architecture: $arch"
            echo "  üåø Detected Branch: $branch"
            
            # Create target structure (branch/arch)
            target_dir="packages/$branch/$arch"
            mkdir -p "$target_dir"
            
            # Copy package
            package_name=$(basename "$package_file")
            if cp -v "$package_file" "$target_dir/"; then
              echo "  ‚úÖ Copied: $package_name"
              total_processed=$((total_processed + 1))
            else
              echo "  ‚ùå Failed to copy: $package_name"
            fi
          done < <(find ./temp-artifacts -name "*.ipk" -o -name "*.apk" -print0)
          
          # Fixed: Better metadata handling
          echo "üîç Looking for metadata files..."
          find ./temp-artifacts -name "Packages" -o -name "Packages.gz" -o -name "README.md" 2>/dev/null | while IFS= read -r meta_file; do
            if [ -f "$meta_file" ]; then
              # Extract parent directory name for architecture/branch
              parent_dir=$(basename $(dirname "$meta_file"))
              if [[ "$parent_dir" =~ ^[a-zA-Z0-9_]+$ ]]; then
                # Try to find matching target directory
                find packages -type d -name "$parent_dir" -exec cp -v "$meta_file" '{}/' \; 2>/dev/null || true
              fi
            fi
          done
          
          # Final count
          final_count=$(find packages -name "*.ipk" -o -name "*.apk" 2>/dev/null | wc -l)
          
          echo "::endgroup::"
          echo "üìä Total packages processed: $final_count"
          echo "PROCESSED_PACKAGES=$final_count" >> $GITHUB_ENV

      - name: üßπ Intelligent repository cleanup
        run: |
          echo "::group::üßπ Repository maintenance"
          
          if [ ! -d "packages" ]; then
            echo "üìÇ No packages directory found, skipping cleanup"
            echo "::endgroup::"
            exit 0
          fi
          
          current_size_gb=$(du -sb packages 2>/dev/null | awk '{print int($1/1024/1024/1024)}' || echo "0")
          echo "üìè Current repository size: ${current_size_gb}GB"
          
          if [ $current_size_gb -gt $MAX_REPO_SIZE_GB ] || [ "${{ github.event.inputs.force_cleanup }}" = "true" ]; then
            echo "üßπ Cleanup required (size: ${current_size_gb}GB, limit: ${MAX_REPO_SIZE_GB}GB)"
            
            # Strategy 1: Remove duplicate packages (keep latest by version)
            echo "  üîÑ Deduplicating packages..."
            find packages -name "*.ipk" -o -name "*.apk" 2>/dev/null | while read -r pkg; do
              base_name=$(basename "$pkg" | sed 's/_[^_]*\.\(ipk\|apk\)$//')
              pkg_dir=$(dirname "$pkg")
              
              # Find all versions of this package in the same directory
              find "$pkg_dir" -name "${base_name}_*" 2>/dev/null | sort -V | head -n -1 | while read -r old_pkg; do
                [ -f "$old_pkg" ] && rm -f "$old_pkg"
              done
            done
            
            # Strategy 2: Remove oldest snapshots first
            if [ -d "packages/SNAPSHOT" ]; then
              echo "  üóëÔ∏è Removing old snapshots..."
              find packages/SNAPSHOT -name "*.ipk" -o -name "*.apk" 2>/dev/null | \
                sort | head -n -$((MAX_REPO_SIZE_GB * 200)) | while read -r old_pkg; do
                [ -f "$old_pkg" ] && rm -f "$old_pkg"
              done
            fi
            
            # Strategy 3: Clean empty directories
            find packages -type d -empty -delete 2>/dev/null || true
            
            new_size_gb=$(du -sb packages 2>/dev/null | awk '{print int($1/1024/1024/1024)}' || echo "0")
            echo "  üìâ Size after cleanup: ${new_size_gb}GB"
          fi
          
          echo "::endgroup::"

      - name: üìä Generate advanced repository metadata
        id: generate_metadata
        run: |
          echo "::group::üìä Generating metadata"
          
          # Calculate comprehensive statistics
          total_packages=$(find packages -name "*.ipk" -o -name "*.apk" 2>/dev/null | wc -l)
          total_branches=$(find packages -mindepth 1 -maxdepth 1 -type d 2>/dev/null | wc -l)
          total_archs=$(find packages -mindepth 2 -maxdepth 2 -type d 2>/dev/null | wc -l)
          repo_size_mb=$(du -sm packages 2>/dev/null | cut -f1 || echo "0")
          
          # Store metadata for later use
          echo "total_packages=$total_packages" >> $GITHUB_OUTPUT
          echo "total_branches=$total_branches" >> $GITHUB_OUTPUT
          echo "total_archs=$total_archs" >> $GITHUB_OUTPUT
          echo "repo_size_mb=$repo_size_mb" >> $GITHUB_OUTPUT
          
          # Create comprehensive repository metadata
          mkdir -p packages
          cat > packages/repository.json <<EOF
          {
            "repository": {
              "name": "üöÄ OpenWRT Custom Packages",
              "description": "Pre-built OpenWRT packages for multiple architectures and versions",
              "version": "2.0.0",
              "updated": "$(date -u '+%Y-%m-%dT%H:%M:%SZ')",
              "statistics": {
                "total_packages": $total_packages,
                "total_branches": $total_branches,
                "total_architectures": $total_archs,
                "repository_size_mb": $repo_size_mb,
                "last_build_packages": ${{ steps.download.outputs.total_packages || 0 }}
              },
              "branches": $(find packages -mindepth 1 -maxdepth 1 -type d -exec basename {} \; 2>/dev/null | sort | jq -R . | jq -s . || echo "[]"),
              "architectures": $(find packages -mindepth 2 -maxdepth 2 -type d -exec dirname {} \; 2>/dev/null | xargs -n1 basename | sort -u | jq -R . | jq -s . || echo "[]"),
              "build_info": {
                "workflow_run_id": "${{ github.event.inputs.runs_id }}",
                "commit_sha": "${{ github.sha }}",
                "trigger": "${{ github.event_name }}",
                "source_repository": "$SOURCE_REPO"
              },
              "usage": {
                "opkg_source": "src/gz custom_packages https://raw.githubusercontent.com/${{ github.repository }}/releases/packages/[BRANCH]/[ARCH]",
                "browse_url": "https://github.com/${{ github.repository }}/tree/releases/packages"
              }
            }
          }
          EOF
          
          # Generate beautiful README with modern formatting
          {
            cat <<'HEADER'
          # üöÄ OpenWRT Custom Packages Repository
          
          <div align="center">
            <img src="https://img.shields.io/badge/OpenWRT-Packages-blue?style=for-the-badge&logo=openwrt" alt="OpenWRT Packages">
            <img src="https://img.shields.io/badge/Status-Active-success?style=for-the-badge" alt="Status">
            <img src="https://img.shields.io/badge/Auto--Updated-Weekly-informational?style=for-the-badge" alt="Auto Updated">
          </div>
          
          <div align="center">
            <h3>üéØ Pre-built packages for multiple OpenWRT versions and architectures</h3>
            <p><em>Automated builds ‚Ä¢ Quality assured ‚Ä¢ Always up-to-date</em></p>
          </div>
          
          ---
          
          ## üìä Repository Statistics
          
          <table>
            <tr>
              <td align="center"><strong>üì¶ Total Packages</strong></td>
              <td align="center"><strong>üèóÔ∏è Architectures</strong></td>
              <td align="center"><strong>üåø Branches</strong></td>
              <td align="center"><strong>üíæ Repository Size</strong></td>
            </tr>
            <tr>
              <td align="center">
          HEADER
            echo "    <img src=\"https://img.shields.io/badge/$total_packages-packages-blue?style=flat-square\" alt=\"$total_packages packages\">"
            echo "  </td>"
            echo "  <td align=\"center\">"
            echo "    <img src=\"https://img.shields.io/badge/$total_archs-architectures-green?style=flat-square\" alt=\"$total_archs architectures\">"
            echo "  </td>"
            echo "  <td align=\"center\">"
            echo "    <img src=\"https://img.shields.io/badge/$total_branches-branches-orange?style=flat-square\" alt=\"$total_branches branches\">"
            echo "  </td>"
            echo "  <td align=\"center\">"
            echo "    <img src=\"https://img.shields.io/badge/${repo_size_mb}MB-size-red?style=flat-square\" alt=\"${repo_size_mb}MB\">"
            echo "  </td>"
            echo "</tr>"
            echo "</table>"
            echo ""
            echo "> üïê **Last updated**: $(date -u '+%Y-%m-%d %H:%M:%S UTC')"
            echo ""
            
            # Generate branch information
            echo "## üåø Supported OpenWRT Versions"
            echo ""
            
            if [ -d "packages" ]; then
              for branch_dir in packages/*; do
                if [ -d "$branch_dir" ]; then
                  branch_name=$(basename "$branch_dir")
                  branch_packages=$(find "$branch_dir" -name "*.ipk" -o -name "*.apk" 2>/dev/null | wc -l)
                  branch_archs=$(find "$branch_dir" -mindepth 1 -maxdepth 1 -type d 2>/dev/null | wc -l)
                  
                  # Branch status badge
                  if [ "$branch_name" = "SNAPSHOT" ]; then
                    badge="![SNAPSHOT](https://img.shields.io/badge/SNAPSHOT-Development-red?style=flat-square)"
                  else
                    badge="![Stable](https://img.shields.io/badge/$branch_name-Stable-green?style=flat-square)"
                  fi
                  
                  echo "### $badge"
                  echo ""
                  echo "| Architecture | Packages | Status |"
                  echo "|--------------|----------|--------|"
                  
                  for arch_dir in "$branch_dir"/*; do
                    if [ -d "$arch_dir" ]; then
                      arch_name=$(basename "$arch_dir")
                      arch_packages=$(find "$arch_dir" -name "*.ipk" -o -name "*.apk" 2>/dev/null | wc -l)
                      if [ $arch_packages -gt 0 ]; then
                        echo "| \`$arch_name\` | $arch_packages | ‚úÖ Available |"
                      fi
                    fi
                  done
                  echo ""
                fi
              done
            else
              echo "No packages available yet."
              echo ""
            fi
            
            # Usage section with corrected repository name
            cat <<USAGE
          ## üöÄ Quick Start
          
          ### Method 1: Add Repository Source
          
          \`\`\`bash
          # Add custom repository (replace [BRANCH] and [ARCH] with your values)
          echo "src/gz custom_packages https://raw.githubusercontent.com/${{ github.repository }}/releases/packages/[BRANCH]/[ARCH]" >> /etc/opkg/customfeeds.conf
          
          # Update package lists
          opkg update
          
          # Install packages
          opkg install [package_name]
          \`\`\`
          
          ### Method 2: Direct Download
          
          Browse packages directly at: [üìÇ Package Browser](../../tree/releases/packages)
          
          ### Method 3: Batch Installation Script
          
          \`\`\`bash
          #!/bin/bash
          # Auto-detect architecture and install packages
          ARCH=\$(opkg print-architecture | awk 'NR==2{print \$2}')
          BRANCH="23.05"  # or 24.10, SNAPSHOT
          
          # Add repository
          echo "src/gz custom_packages https://raw.githubusercontent.com/${{ github.repository }}/releases/packages/\$BRANCH/\$ARCH" > /etc/opkg/customfeeds.conf
          
          # Update and install
          opkg update
          opkg list | grep custom_packages
          \`\`\`
          
          ## üõ°Ô∏è Quality Assurance
          
          - ‚úÖ **Automated Testing**: All packages undergo validation
          - üîÑ **Weekly Builds**: Fresh packages every week
          - üìä **Build Monitoring**: Failed builds are tracked and fixed
          - üè∑Ô∏è **Version Tracking**: Clear versioning and changelog
          
          ## ü§ù Contributing
          
          Want to add your packages? Here's how:
          
          1. **Fork** this repository
          2. **Add** your packages to the \`packages/\` directory
          3. **Test** locally with OpenWRT SDK
          4. **Submit** a pull request
          
          ### Package Structure
          \`\`\`
          packages/
          ‚îú‚îÄ‚îÄ your-package/
          ‚îÇ   ‚îú‚îÄ‚îÄ Makefile
          ‚îÇ   ‚îú‚îÄ‚îÄ files/
          ‚îÇ   ‚îî‚îÄ‚îÄ patches/
          \`\`\`
          
          ## üêõ Troubleshooting
          
          <details>
          <summary>‚ùì <strong>Common Issues & Solutions</strong></summary>
          
          ### Package Installation Fails
          \`\`\`bash
          # Clear opkg cache and retry
          rm -rf /tmp/opkg-lists/*
          opkg update
          opkg install [package_name]
          \`\`\`
          
          ### Architecture Mismatch
          \`\`\`bash
          # Check your device architecture
          opkg print-architecture
          # Use the correct architecture in repository URL
          \`\`\`
          
          ### Repository Not Found
          \`\`\`bash
          # Verify repository URL is correct
          cat /etc/opkg/customfeeds.conf
          \`\`\`
          
          </details>
          
          ## üìà Build Status & Monitoring
          
          <div align="center">
            <a href="../../actions">
              <img src="https://img.shields.io/github/actions/workflow/status/${{ github.repository }}/build.yml?branch=main&style=for-the-badge&logo=github-actions" alt="Build Status">
            </a>
            <a href="../../releases">
              <img src="https://img.shields.io/github/v/release/${{ github.repository }}?style=for-the-badge&logo=github" alt="Latest Release">
            </a>
            <a href="../../commits/main">
              <img src="https://img.shields.io/github/last-commit/${{ github.repository }}?style=for-the-badge&logo=git" alt="Last Commit">
            </a>
          </div>
          
          ## üìû Support & Community
          
          - üêõ **Bug Reports**: [Create an Issue](../../issues/new?template=bug_report.md)
          - üí° **Feature Requests**: [Request Feature](../../issues/new?template=feature_request.md)
          - üí¨ **Discussions**: [Join Discussion](../../discussions)
          - üìß **Contact**: [Email Support](mailto:support@example.com)
          
          ## üìÑ License & Legal
          
          This repository contains packages from various sources. Each package maintains its original license.
          
          - üìú **Repository License**: MIT
          - ‚öñÔ∏è **Package Licenses**: Varies (see individual packages)
          - üîí **Privacy Policy**: No personal data collected
          
          ---
          
          <div align="center">
            <h3>üåü Star this repository if it helps you!</h3>
            <p>
              <a href="../../stargazers">‚≠ê Star</a> ‚Ä¢
              <a href="../../network/members">üç¥ Fork</a> ‚Ä¢
              <a href="../../issues">üêõ Report Bug</a> ‚Ä¢
              <a href="../../discussions">üí¨ Discuss</a>
            </p>
          </div>
          
          <div align="center">
            <sub>Built with ‚ù§Ô∏è using GitHub Actions ‚Ä¢ Powered by OpenWRT</sub>
          </div>
          USAGE
          } > README.md
          
          echo "::endgroup::"
          echo "‚úÖ Generated enhanced repository metadata"

      - name: üöÄ Smart commit and deployment
        run: |
          echo "::group::üöÄ Deploying changes"
          
          # Check for changes
          if git diff --quiet && git diff --cached --quiet; then
            echo "‚ÑπÔ∏è No changes to commit"
            echo "::endgroup::"
            exit 0
          fi
          
          # Stage metadata files first
          git add .gitattributes packages/repository.json README.md 2>/dev/null || true
          
          # Commit metadata first
          if ! git diff --cached --quiet; then
            git commit -m "üìù Update repository metadata" \
                      -m "üïê Updated: $(date -u '+%Y-%m-%d %H:%M:%S UTC')" \
                      -m "üì¶ Packages: $(find packages -name '*.ipk' -o -name '*.apk' 2>/dev/null | wc -l)" \
                      -m "üèóÔ∏è Build: ${{ github.event.inputs.runs_id }}" \
                      -m "üåø Source: $SOURCE_REPO"
          fi
          
          # Process packages by architecture with progress
          total_packages=${PROCESSED_PACKAGES:-$(find packages -name "*.ipk" -o -name "*.apk" 2>/dev/null | wc -l)}
          
          if [ $total_packages -gt 0 ]; then
            echo "üì§ Committing $total_packages packages..."
            
            # Smart batching by architecture
            processed=0
            for branch_dir in packages/*; do
              if [ -d "$branch_dir" ]; then
                branch=$(basename "$branch_dir")
                
                for arch_dir in "$branch_dir"/*; do
                  if [ -d "$arch_dir" ]; then
                    arch=$(basename "$arch_dir")
                    arch_packages=$(find "$arch_dir" -name "*.ipk" -o -name "*.apk" 2>/dev/null | wc -l)
                    
                    if [ $arch_packages -gt 0 ]; then
                      echo "  üì¶ Committing $arch_packages packages for $branch/$arch"
                      
                      # Progress indicator
                      if [ $total_packages -gt 0 ]; then
                        progress=$((processed * 100 / total_packages))
                        echo "::notice::Progress: $progress% ($processed/$total_packages packages)"
                      fi
                      
                      git add "$arch_dir" 2>/dev/null || true
                      
                      if ! git diff --cached --quiet; then
                        git commit -m "üì¶ Add $branch/$arch packages" \
                                  -m "üèóÔ∏è Architecture: $arch" \
                                  -m "üåø Branch: $branch" \
                                  -m "üìä Count: $arch_packages packages" \
                                  -m "üîß Build: ${{ github.event.inputs.runs_id }}"
                      fi
                      
                      processed=$((processed + arch_packages))
                    fi
                  fi
                done
              fi
            done
          fi
          
          echo "::endgroup::"

      - name: üåê Push to GitHub
        run: |
          echo "::group::üåê Pushing to GitHub"
          
          # Enhanced push with retry and conflict resolution
          max_retries=5
          retry_delay=30
          
          for attempt in $(seq 1 $max_retries); do
            echo "üöÄ Push attempt $attempt/$max_retries"
            
            if git push origin releases; then
              echo "‚úÖ Successfully pushed on attempt $attempt"
              echo "üéâ Deployment completed successfully!"
              break
            else
              echo "‚ö†Ô∏è Push attempt $attempt failed"
              
              if [ $attempt -eq $max_retries ]; then
                echo "‚ùå All push attempts failed"
                exit 1
              fi
              
              echo "‚è≥ Waiting ${retry_delay}s before retry..."
              sleep $retry_delay
              
              # Attempt conflict resolution
              echo "üîÑ Attempting to resolve conflicts..."
              if ! git pull --rebase origin releases; then
                echo "‚ùå Failed to resolve conflicts with rebase, trying merge"
                git rebase --abort 2>/dev/null || true
                if ! git pull --strategy-option=theirs origin releases; then
                  echo "‚ùå Failed to resolve conflicts with merge"
                  continue
                fi
              fi
              
              # Exponential backoff
              retry_delay=$((retry_delay * 2))
            fi
          done
          
          echo "::endgroup::"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: üéâ Generate success summary
        if: success()
        run: |
          total_packages=$(find packages -name "*.ipk" -o -name "*.apk" 2>/dev/null | wc -l)
          repo_size=$(du -sh packages 2>/dev/null | cut -f1 || echo "0B")
          
          cat >> $GITHUB_STEP_SUMMARY <<EOF
          ## üéâ Release Completed Successfully!
          
          ### üìä Final Statistics
          - **Total Packages**: $total_packages
          - **Repository Size**: $repo_size
          - **Build Source**: Run ID ${{ github.event.inputs.runs_id }}
          - **Commit SHA**: \`${{ github.sha }}\`
          
          ### üîó Quick Links
          - üì¶ [Browse Packages](../../tree/releases/packages)
          - üìã [Repository Metadata](../../blob/releases/packages/repository.json)
          - üèÉ [View Workflow](../../actions/runs/${{ github.run_id }})
          
          ### üöÄ What's Next?
          1. Packages are now available in the \`releases\` branch
          2. Users can add the repository to their OpenWRT devices
          3. Automated weekly builds will keep packages updated
          
          ---
          *Generated on $(date -u '+%Y-%m-%d %H:%M:%S UTC') by GitHub Actions*
          EOF

  cleanup:
    name: üßπ Cleanup & Maintenance
    runs-on: ubuntu-latest
    needs: release
    if: always()
    
    steps:
      - name: üìä Workflow summary
        run: |
          echo "### üèÅ Workflow Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Job | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|-----|--------|" >> $GITHUB_STEP_SUMMARY
          
          case "${{ needs.release.result }}" in
            "success")
              status="‚úÖ Success"
              ;;
            "failure")
              status="‚ùå Failed"
              ;;
            "cancelled")
              status="üö´ Cancelled"
              ;;
            *)
              status="‚è≠Ô∏è Skipped"
              ;;
          esac
          
          echo "| Release | $status |" >> $GITHUB_STEP_SUMMARY

      - name: üîî Notification on failure
        if: failure() || needs.release.result == 'failure'
        run: |
          echo "::error title=Workflow Failed::‚ùå The OpenWRT package release workflow has failed"
          echo "Please check the logs and fix any issues before the next scheduled run."
          echo "::notice::Check the workflow logs for detailed error information."