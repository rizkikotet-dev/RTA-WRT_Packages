name: Release & Deploy OpenWRT Packages

on:
  workflow_dispatch:
    inputs:
      runs_id:
        description: 'Run ID to build packages'
        required: true
        type: string
      force_cleanup:
        description: 'Force repository cleanup'
        required: false
        type: boolean
        default: false

env:
  FORCE_UNSAFE_CONFIGURE: 1
  MAX_REPO_SIZE_GB: 5
  SOURCE_REPO: ${{ github.repository }}

jobs:
  release:
    name: 🚀 Release & Deploy Packages
    runs-on: ubuntu-latest

    steps:
      - name: 🎯 Release initialization
        run: |
          echo "::notice title=Release Started::🚀 Starting package release process"
          echo "### 🚀 Release Pipeline" >> $GITHUB_STEP_SUMMARY
          echo "- **Trigger**: ${{ github.event_name }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Run ID**: ${{ github.event.inputs.runs_id }}" >> $GITHUB_STEP_SUMMARY

      - name: 📥 Checkout releases branch
        uses: actions/checkout@v4
        with:
          ref: releases
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: 🔧 Setup release environment
        run: |
          # Install dependencies
          sudo apt-get update -qq
          sudo apt-get install -y --no-install-recommends jq zstd pv curl
          
          # Configure Git
          git config user.email "actions@github.com"
          git config user.name "🤖 OpenWRT Package Bot"
          git config pull.rebase true
          git config core.compression 9
          git config pack.compression 9
          
          # Create .gitattributes for better handling of binary files
          cat > .gitattributes <<EOF
          *.ipk binary
          *.apk binary
          *.tar.gz binary
          *.tar.xz binary
          Packages text
          README.md text
          *.json text
          EOF

      - name: ⬇️ Download artifacts
        uses: actions/download-artifact@v4
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          run-id: ${{ github.event.inputs.runs_id }}
          merge-multiple: true
          path: ./temp-artifacts

      - name: 📦 Process artifacts
        id: download
        run: |
          if [ ! -d "./temp-artifacts" ]; then
            echo "::error::No artifacts directory found"
            echo "success=false" >> $GITHUB_OUTPUT
            exit 1
          fi
          
          total_packages=$(find ./temp-artifacts -name "*.ipk" -o -name "*.apk" 2>/dev/null | wc -l)
          echo "📊 Found $total_packages total packages"
          
          if [ $total_packages -eq 0 ]; then
            echo "::warning::No packages found in artifacts"
            echo "success=false" >> $GITHUB_OUTPUT
            exit 0
          fi
          
          echo "success=true" >> $GITHUB_OUTPUT
          echo "total_packages=$total_packages" >> $GITHUB_OUTPUT
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: 🔄 Process and organize packages
        if: steps.download.outputs.success == 'true'
        run: |
          echo "::group::🔄 Processing artifacts"
          
          mkdir -p packages
          total_processed=0
          
          # Process each artifact directory
          for artifact_dir in ./temp-artifacts/packages_* ./temp-artifacts/*/packages_*; do
            # Check if directory exists and is not a glob pattern
            if [ ! -d "$artifact_dir" ]; then
              continue
            fi
            
            artifact_name=$(basename "$artifact_dir")
            echo "📁 Processing: $artifact_name"
            
            # Parse artifact metadata with better error handling
            if [[ "$artifact_name" =~ ^packages_(.+)-(.+)$ ]]; then
              arch="${BASH_REMATCH[1]}"
              branch="${BASH_REMATCH[2]}"
            else
              echo "::warning::Could not parse artifact name: $artifact_name"
              # Try to extract from directory structure
              arch=$(echo "$artifact_name" | sed 's/packages_//' | sed 's/-[^-]*$//')
              branch=$(echo "$artifact_name" | sed 's/.*-//')
            fi
            
            echo "  🏗️ Architecture: $arch"
            echo "  🌿 Branch: $branch"
            
            # Create target structure
            target_dir="packages/$branch/$arch"
            mkdir -p "$target_dir"
            
            # Find and process packages with multiple search paths
            package_found=false
            for search_path in \
              "$artifact_dir/releases/$branch/$arch" \
              "$artifact_dir/$branch/$arch" \
              "$artifact_dir/packages/$branch/$arch" \
              "$artifact_dir"; do
              
              if [ -d "$search_path" ]; then
                echo "  📦 Processing packages from: $search_path"
                
                # Copy packages efficiently
                find "$search_path" -maxdepth 1 -name "*.ipk" -o -name "*.apk" 2>/dev/null | while read -r package; do
                  if [ -f "$package" ]; then
                    cp "$package" "$target_dir/"
                    total_processed=$((total_processed + 1))
                    package_found=true
                  fi
                done
                
                # Copy metadata files if they exist
                [ -f "$search_path/README.md" ] && cp "$search_path/README.md" "$target_dir/"
                [ -f "$search_path/Packages" ] && cp "$search_path/Packages" "$target_dir/"
                [ -f "$search_path/Packages.gz" ] && cp "$search_path/Packages.gz" "$target_dir/"
                
                if [ "$package_found" = true ]; then
                  break
                fi
              fi
            done
            
            # Verify processing
            processed_count=$(find "$target_dir" -name "*.ipk" -o -name "*.apk" 2>/dev/null | wc -l)
            echo "  ✅ Processed $processed_count packages for $arch/$branch"
            total_processed=$((total_processed + processed_count))
          done
          
          echo "::endgroup::"
          echo "📊 Total packages processed: $total_processed"

      - name: 🧹 Intelligent repository cleanup
        run: |
          echo "::group::🧹 Repository maintenance"
          
          if [ ! -d "packages" ]; then
            echo "📂 No packages directory found, skipping cleanup"
            echo "::endgroup::"
            exit 0
          fi
          
          current_size_gb=$(du -sb packages 2>/dev/null | awk '{print int($1/1024/1024/1024)}' || echo "0")
          echo "📏 Current repository size: ${current_size_gb}GB"
          
          if [ $current_size_gb -gt $MAX_REPO_SIZE_GB ] || [ "${{ github.event.inputs.force_cleanup }}" = "true" ]; then
            echo "🧹 Cleanup required (size: ${current_size_gb}GB, limit: ${MAX_REPO_SIZE_GB}GB)"
            
            # Strategy 1: Remove duplicate packages (keep latest by version)
            echo "  🔄 Deduplicating packages..."
            find packages -name "*.ipk" -o -name "*.apk" 2>/dev/null | while read -r pkg; do
              base_name=$(basename "$pkg" | sed 's/_[^_]*\.\(ipk\|apk\)$//')
              pkg_dir=$(dirname "$pkg")
              
              # Find all versions of this package in the same directory
              find "$pkg_dir" -name "${base_name}_*" 2>/dev/null | sort -V | head -n -1 | while read -r old_pkg; do
                [ -f "$old_pkg" ] && rm -f "$old_pkg"
              done
            done
            
            # Strategy 2: Remove oldest snapshots first
            if [ -d "packages/SNAPSHOT" ]; then
              echo "  🗑️ Removing old snapshots..."
              find packages/SNAPSHOT -name "*.ipk" -o -name "*.apk" 2>/dev/null | \
                sort | head -n -$((MAX_REPO_SIZE_GB * 200)) | while read -r old_pkg; do
                [ -f "$old_pkg" ] && rm -f "$old_pkg"
              done
            fi
            
            # Strategy 3: Clean empty directories
            find packages -type d -empty -delete 2>/dev/null || true
            
            new_size_gb=$(du -sb packages 2>/dev/null | awk '{print int($1/1024/1024/1024)}' || echo "0")
            echo "  📉 Size after cleanup: ${new_size_gb}GB"
          fi
          
          echo "::endgroup::"

      - name: 📊 Generate advanced repository metadata
        id: generate_metadata
        run: |
          echo "::group::📊 Generating metadata"
          
          # Calculate comprehensive statistics
          total_packages=$(find packages -name "*.ipk" -o -name "*.apk" 2>/dev/null | wc -l)
          total_branches=$(find packages -mindepth 1 -maxdepth 1 -type d 2>/dev/null | wc -l)
          total_archs=$(find packages -mindepth 2 -maxdepth 2 -type d 2>/dev/null | wc -l)
          repo_size_mb=$(du -sm packages 2>/dev/null | cut -f1 || echo "0")
          
          # Store metadata for later use
          echo "total_packages=$total_packages" >> $GITHUB_OUTPUT
          echo "total_branches=$total_branches" >> $GITHUB_OUTPUT
          echo "total_archs=$total_archs" >> $GITHUB_OUTPUT
          echo "repo_size_mb=$repo_size_mb" >> $GITHUB_OUTPUT
          
          # Create comprehensive repository metadata
          mkdir -p packages
          cat > packages/repository.json <<EOF
          {
            "repository": {
              "name": "🚀 OpenWRT Custom Packages",
              "description": "Pre-built OpenWRT packages for multiple architectures and versions",
              "version": "2.0.0",
              "updated": "$(date -u '+%Y-%m-%dT%H:%M:%SZ')",
              "statistics": {
                "total_packages": $total_packages,
                "total_branches": $total_branches,
                "total_architectures": $total_archs,
                "repository_size_mb": $repo_size_mb,
                "last_build_packages": ${{ steps.download.outputs.total_packages || 0 }}
              },
              "branches": $(find packages -mindepth 1 -maxdepth 1 -type d -exec basename {} \; 2>/dev/null | sort | jq -R . | jq -s . || echo "[]"),
              "architectures": $(find packages -mindepth 2 -maxdepth 2 -type d -exec dirname {} \; 2>/dev/null | xargs -n1 basename | sort -u | jq -R . | jq -s . || echo "[]"),
              "build_info": {
                "workflow_run_id": "${{ github.event.inputs.runs_id }}",
                "commit_sha": "${{ github.sha }}",
                "trigger": "${{ github.event_name }}",
                "source_repository": "$SOURCE_REPO"
              },
              "usage": {
                "opkg_source": "src/gz custom_packages https://raw.githubusercontent.com/${{ github.repository }}/releases/packages/[BRANCH]/[ARCH]",
                "browse_url": "https://github.com/${{ github.repository }}/tree/releases/packages"
              }
            }
          }
          EOF
          
          # Generate beautiful README with modern formatting
          {
            cat <<'HEADER'
          # 🚀 OpenWRT Custom Packages Repository
          
          <div align="center">
            <img src="https://img.shields.io/badge/OpenWRT-Packages-blue?style=for-the-badge&logo=openwrt" alt="OpenWRT Packages">
            <img src="https://img.shields.io/badge/Status-Active-success?style=for-the-badge" alt="Status">
            <img src="https://img.shields.io/badge/Auto--Updated-Weekly-informational?style=for-the-badge" alt="Auto Updated">
          </div>
          
          <div align="center">
            <h3>🎯 Pre-built packages for multiple OpenWRT versions and architectures</h3>
            <p><em>Automated builds • Quality assured • Always up-to-date</em></p>
          </div>
          
          ---
          
          ## 📊 Repository Statistics
          
          <table>
            <tr>
              <td align="center"><strong>📦 Total Packages</strong></td>
              <td align="center"><strong>🏗️ Architectures</strong></td>
              <td align="center"><strong>🌿 Branches</strong></td>
              <td align="center"><strong>💾 Repository Size</strong></td>
            </tr>
            <tr>
              <td align="center">
          HEADER
            echo "    <img src=\"https://img.shields.io/badge/$total_packages-packages-blue?style=flat-square\" alt=\"$total_packages packages\">"
            echo "  </td>"
            echo "  <td align=\"center\">"
            echo "    <img src=\"https://img.shields.io/badge/$total_archs-architectures-green?style=flat-square\" alt=\"$total_archs architectures\">"
            echo "  </td>"
            echo "  <td align=\"center\">"
            echo "    <img src=\"https://img.shields.io/badge/$total_branches-branches-orange?style=flat-square\" alt=\"$total_branches branches\">"
            echo "  </td>"
            echo "  <td align=\"center\">"
            echo "    <img src=\"https://img.shields.io/badge/${repo_size_mb}MB-size-red?style=flat-square\" alt=\"${repo_size_mb}MB\">"
            echo "  </td>"
            echo "</tr>"
            echo "</table>"
            echo ""
            echo "> 🕐 **Last updated**: $(date -u '+%Y-%m-%d %H:%M:%S UTC')"
            echo ""
            
            # Generate branch information
            echo "## 🌿 Supported OpenWRT Versions"
            echo ""
            
            if [ -d "packages" ]; then
              for branch_dir in packages/*; do
                if [ -d "$branch_dir" ]; then
                  branch_name=$(basename "$branch_dir")
                  branch_packages=$(find "$branch_dir" -name "*.ipk" -o -name "*.apk" 2>/dev/null | wc -l)
                  branch_archs=$(find "$branch_dir" -mindepth 1 -maxdepth 1 -type d 2>/dev/null | wc -l)
                  
                  # Branch status badge
                  if [ "$branch_name" = "SNAPSHOT" ]; then
                    badge="![SNAPSHOT](https://img.shields.io/badge/SNAPSHOT-Development-red?style=flat-square)"
                  else
                    badge="![Stable](https://img.shields.io/badge/$branch_name-Stable-green?style=flat-square)"
                  fi
                  
                  echo "### $badge"
                  echo ""
                  echo "| Architecture | Packages | Status |"
                  echo "|--------------|----------|--------|"
                  
                  for arch_dir in "$branch_dir"/*; do
                    if [ -d "$arch_dir" ]; then
                      arch_name=$(basename "$arch_dir")
                      arch_packages=$(find "$arch_dir" -name "*.ipk" -o -name "*.apk" 2>/dev/null | wc -l)
                      if [ $arch_packages -gt 0 ]; then
                        echo "| \`$arch_name\` | $arch_packages | ✅ Available |"
                      fi
                    fi
                  done
                  echo ""
                fi
              done
            else
              echo "No packages available yet."
              echo ""
            fi
            
            # Usage section with corrected repository name
            cat <<USAGE
          ## 🚀 Quick Start
          
          ### Method 1: Add Repository Source
          
          \`\`\`bash
          # Add custom repository (replace [BRANCH] and [ARCH] with your values)
          echo "src/gz custom_packages https://raw.githubusercontent.com/${{ github.repository }}/releases/packages/[BRANCH]/[ARCH]" >> /etc/opkg/customfeeds.conf
          
          # Update package lists
          opkg update
          
          # Install packages
          opkg install [package_name]
          \`\`\`
          
          ### Method 2: Direct Download
          
          Browse packages directly at: [📂 Package Browser](../../tree/releases/packages)
          
          ### Method 3: Batch Installation Script
          
          \`\`\`bash
          #!/bin/bash
          # Auto-detect architecture and install packages
          ARCH=\$(opkg print-architecture | awk 'NR==2{print \$2}')
          BRANCH="23.05"  # or 24.10, SNAPSHOT
          
          # Add repository
          echo "src/gz custom_packages https://raw.githubusercontent.com/${{ github.repository }}/releases/packages/\$BRANCH/\$ARCH" > /etc/opkg/customfeeds.conf
          
          # Update and install
          opkg update
          opkg list | grep custom_packages
          \`\`\`
          
          ## 🛡️ Quality Assurance
          
          - ✅ **Automated Testing**: All packages undergo validation
          - 🔄 **Weekly Builds**: Fresh packages every week
          - 📊 **Build Monitoring**: Failed builds are tracked and fixed
          - 🏷️ **Version Tracking**: Clear versioning and changelog
          
          ## 🤝 Contributing
          
          Want to add your packages? Here's how:
          
          1. **Fork** this repository
          2. **Add** your packages to the \`packages/\` directory
          3. **Test** locally with OpenWRT SDK
          4. **Submit** a pull request
          
          ### Package Structure
          \`\`\`
          packages/
          ├── your-package/
          │   ├── Makefile
          │   ├── files/
          │   └── patches/
          \`\`\`
          
          ## 🐛 Troubleshooting
          
          <details>
          <summary>❓ <strong>Common Issues & Solutions</strong></summary>
          
          ### Package Installation Fails
          \`\`\`bash
          # Clear opkg cache and retry
          rm -rf /tmp/opkg-lists/*
          opkg update
          opkg install [package_name]
          \`\`\`
          
          ### Architecture Mismatch
          \`\`\`bash
          # Check your device architecture
          opkg print-architecture
          # Use the correct architecture in repository URL
          \`\`\`
          
          ### Repository Not Found
          \`\`\`bash
          # Verify repository URL is correct
          cat /etc/opkg/customfeeds.conf
          \`\`\`
          
          </details>
          
          ## 📈 Build Status & Monitoring
          
          <div align="center">
            <a href="../../actions">
              <img src="https://img.shields.io/github/actions/workflow/status/${{ github.repository }}/build.yml?branch=main&style=for-the-badge&logo=github-actions" alt="Build Status">
            </a>
            <a href="../../releases">
              <img src="https://img.shields.io/github/v/release/${{ github.repository }}?style=for-the-badge&logo=github" alt="Latest Release">
            </a>
            <a href="../../commits/main">
              <img src="https://img.shields.io/github/last-commit/${{ github.repository }}?style=for-the-badge&logo=git" alt="Last Commit">
            </a>
          </div>
          
          ## 📞 Support & Community
          
          - 🐛 **Bug Reports**: [Create an Issue](../../issues/new?template=bug_report.md)
          - 💡 **Feature Requests**: [Request Feature](../../issues/new?template=feature_request.md)
          - 💬 **Discussions**: [Join Discussion](../../discussions)
          - 📧 **Contact**: [Email Support](mailto:support@example.com)
          
          ## 📄 License & Legal
          
          This repository contains packages from various sources. Each package maintains its original license.
          
          - 📜 **Repository License**: MIT
          - ⚖️ **Package Licenses**: Varies (see individual packages)
          - 🔒 **Privacy Policy**: No personal data collected
          
          ---
          
          <div align="center">
            <h3>🌟 Star this repository if it helps you!</h3>
            <p>
              <a href="../../stargazers">⭐ Star</a> •
              <a href="../../network/members">🍴 Fork</a> •
              <a href="../../issues">🐛 Report Bug</a> •
              <a href="../../discussions">💬 Discuss</a>
            </p>
          </div>
          
          <div align="center">
            <sub>Built with ❤️ using GitHub Actions • Powered by OpenWRT</sub>
          </div>
          USAGE
          } > README.md
          
          echo "::endgroup::"
          echo "✅ Generated enhanced repository metadata"

      - name: 🚀 Smart commit and deployment
        run: |
          echo "::group::🚀 Deploying changes"
          
          # Check for changes
          if git diff --quiet && git diff --cached --quiet; then
            echo "ℹ️ No changes to commit"
            echo "::endgroup::"
            exit 0
          fi
          
          # Stage metadata files first
          git add .gitattributes packages/repository.json README.md 2>/dev/null || true
          
          # Commit metadata first
          if ! git diff --cached --quiet; then
            git commit -m "📝 Update repository metadata" \
                      -m "🕐 Updated: $(date -u '+%Y-%m-%d %H:%M:%S UTC')" \
                      -m "📦 Packages: $(find packages -name '*.ipk' -o -name '*.apk' 2>/dev/null | wc -l)" \
                      -m "🏗️ Build: ${{ github.event.inputs.runs_id }}" \
                      -m "🌿 Source: $SOURCE_REPO"
          fi
          
          # Process packages by architecture with progress
          total_packages=$(find packages -name "*.ipk" -o -name "*.apk" 2>/dev/null | wc -l)
          
          if [ $total_packages -gt 0 ]; then
            echo "📤 Committing $total_packages packages..."
            
            # Smart batching by architecture
            processed=0
            for branch_dir in packages/*; do
              if [ -d "$branch_dir" ]; then
                branch=$(basename "$branch_dir")
                
                for arch_dir in "$branch_dir"/*; do
                  if [ -d "$arch_dir" ]; then
                    arch=$(basename "$arch_dir")
                    arch_packages=$(find "$arch_dir" -name "*.ipk" -o -name "*.apk" 2>/dev/null | wc -l)
                    
                    if [ $arch_packages -gt 0 ]; then
                      echo "  📦 Committing $arch_packages packages for $branch/$arch"
                      
                      # Progress indicator
                      if [ $total_packages -gt 0 ]; then
                        progress=$((processed * 100 / total_packages))
                        echo "::notice::Progress: $progress% ($processed/$total_packages packages)"
                      fi
                      
                      git add "$arch_dir" 2>/dev/null || true
                      
                      if ! git diff --cached --quiet; then
                        git commit -m "📦 Add $branch/$arch packages" \
                                  -m "🏗️ Architecture: $arch" \
                                  -m "🌿 Branch: $branch" \
                                  -m "📊 Count: $arch_packages packages" \
                                  -m "🔧 Build: ${{ github.event.inputs.runs_id }}"
                      fi
                      
                      processed=$((processed + arch_packages))
                    fi
                  fi
                done
              fi
            done
          fi
          
          echo "::endgroup::"

      - name: 🌐 Push to GitHub
        run: |
          echo "::group::🌐 Pushing to GitHub"
          
          # Enhanced push with retry and conflict resolution
          max_retries=5
          retry_delay=30
          
          for attempt in $(seq 1 $max_retries); do
            echo "🚀 Push attempt $attempt/$max_retries"
            
            if git push origin releases; then
              echo "✅ Successfully pushed on attempt $attempt"
              echo "🎉 Deployment completed successfully!"
              break
            else
              echo "⚠️ Push attempt $attempt failed"
              
              if [ $attempt -eq $max_retries ]; then
                echo "❌ All push attempts failed"
                exit 1
              fi
              
              echo "⏳ Waiting ${retry_delay}s before retry..."
              sleep $retry_delay
              
              # Attempt conflict resolution
              echo "🔄 Attempting to resolve conflicts..."
              if ! git pull --rebase origin releases; then
                echo "❌ Failed to resolve conflicts with rebase, trying merge"
                git rebase --abort 2>/dev/null || true
                if ! git pull --strategy-option=theirs origin releases; then
                  echo "❌ Failed to resolve conflicts with merge"
                  continue
                fi
              fi
              
              # Exponential backoff
              retry_delay=$((retry_delay * 2))
            fi
          done
          
          echo "::endgroup::"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: 🎉 Generate success summary
        if: success()
        run: |
          total_packages=$(find packages -name "*.ipk" -o -name "*.apk" 2>/dev/null | wc -l)
          repo_size=$(du -sh packages 2>/dev/null | cut -f1 || echo "0B")
          
          cat >> $GITHUB_STEP_SUMMARY <<EOF
          ## 🎉 Release Completed Successfully!
          
          ### 📊 Final Statistics
          - **Total Packages**: $total_packages
          - **Repository Size**: $repo_size
          - **Build Source**: Run ID ${{ github.event.inputs.runs_id }}
          - **Commit SHA**: \`${{ github.sha }}\`
          
          ### 🔗 Quick Links
          - 📦 [Browse Packages](../../tree/releases/packages)
          - 📋 [Repository Metadata](../../blob/releases/packages/repository.json)
          - 🏃 [View Workflow](../../actions/runs/${{ github.run_id }})
          
          ### 🚀 What's Next?
          1. Packages are now available in the \`releases\` branch
          2. Users can add the repository to their OpenWRT devices
          3. Automated weekly builds will keep packages updated
          
          ---
          *Generated on $(date -u '+%Y-%m-%d %H:%M:%S UTC') by GitHub Actions*
          EOF

  cleanup:
    name: 🧹 Cleanup & Maintenance
    runs-on: ubuntu-latest
    needs: release
    if: always()
    
    steps:
      - name: 📊 Workflow summary
        run: |
          echo "### 🏁 Workflow Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Job | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|-----|--------|" >> $GITHUB_STEP_SUMMARY
          
          case "${{ needs.release.result }}" in
            "success")
              status="✅ Success"
              ;;
            "failure")
              status="❌ Failed"
              ;;
            "cancelled")
              status="🚫 Cancelled"
              ;;
            *)
              status="⏭️ Skipped"
              ;;
          esac
          
          echo "| Release | $status |" >> $GITHUB_STEP_SUMMARY

      - name: 🔔 Notification on failure
        if: failure() || needs.release.result == 'failure'
        run: |
          echo "::error title=Workflow Failed::❌ The OpenWRT package release workflow has failed"
          echo "Please check the logs and fix any issues before the next scheduled run."
          echo "::notice::Check the workflow logs for detailed error information."